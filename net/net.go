// Code generated by a tool. DO NOT EDIT.

// Package net provides a mockable wrapper for net.
package net

import (
	net "net"
	netip "net/netip"
	os "os"
	time "time"
)

var _ Interface = &Impl{}
var _ = net.CIDRMask

type Interface interface {
	CIDRMask(ones int, bits int) net.IPMask
	Dial(network string, address string) (net.Conn, error)
	DialIP(network string, laddr *net.IPAddr, raddr *net.IPAddr) (*net.IPConn, error)
	DialTCP(network string, laddr *net.TCPAddr, raddr *net.TCPAddr) (*net.TCPConn, error)
	DialTimeout(network string, address string, timeout time.Duration) (net.Conn, error)
	DialUDP(network string, laddr *net.UDPAddr, raddr *net.UDPAddr) (*net.UDPConn, error)
	DialUnix(network string, laddr *net.UnixAddr, raddr *net.UnixAddr) (*net.UnixConn, error)
	FileConn(f *os.File) (c net.Conn, err error)
	FileListener(f *os.File) (ln net.Listener, err error)
	FilePacketConn(f *os.File) (c net.PacketConn, err error)
	IPv4(a byte, b byte, c byte, d byte) net.IP
	IPv4Mask(a byte, b byte, c byte, d byte) net.IPMask
	InterfaceAddrs() ([]net.Addr, error)
	InterfaceByIndex(index int) (*net.Interface, error)
	InterfaceByName(name string) (*net.Interface, error)
	Interfaces() ([]net.Interface, error)
	JoinHostPort(host string, port string) string
	Listen(network string, address string) (net.Listener, error)
	ListenIP(network string, laddr *net.IPAddr) (*net.IPConn, error)
	ListenMulticastUDP(network string, ifi *net.Interface, gaddr *net.UDPAddr) (*net.UDPConn, error)
	ListenPacket(network string, address string) (net.PacketConn, error)
	ListenTCP(network string, laddr *net.TCPAddr) (*net.TCPListener, error)
	ListenUDP(network string, laddr *net.UDPAddr) (*net.UDPConn, error)
	ListenUnix(network string, laddr *net.UnixAddr) (*net.UnixListener, error)
	ListenUnixgram(network string, laddr *net.UnixAddr) (*net.UnixConn, error)
	LookupAddr(addr string) (names []string, err error)
	LookupCNAME(host string) (cname string, err error)
	LookupHost(host string) (addrs []string, err error)
	LookupIP(host string) ([]net.IP, error)
	LookupMX(name string) ([]*net.MX, error)
	LookupNS(name string) ([]*net.NS, error)
	LookupPort(network string, service string) (port int, err error)
	LookupSRV(service string, proto string, name string) (cname string, addrs []*net.SRV, err error)
	LookupTXT(name string) ([]string, error)
	ParseCIDR(s string) (net.IP, *net.IPNet, error)
	ParseIP(s string) net.IP
	ParseMAC(s string) (hw net.HardwareAddr, err error)
	Pipe() (net.Conn, net.Conn)
	ResolveIPAddr(network string, address string) (*net.IPAddr, error)
	ResolveTCPAddr(network string, address string) (*net.TCPAddr, error)
	ResolveUDPAddr(network string, address string) (*net.UDPAddr, error)
	ResolveUnixAddr(network string, address string) (*net.UnixAddr, error)
	SplitHostPort(hostport string) (host string, port string, err error)
	TCPAddrFromAddrPort(addr netip.AddrPort) *net.TCPAddr
	UDPAddrFromAddrPort(addr netip.AddrPort) *net.UDPAddr
}

type Impl struct{}

func (*Impl) CIDRMask(ones int, bits int) net.IPMask {
	return net.CIDRMask(ones, bits)
}
func (*Impl) Dial(network string, address string) (net.Conn, error) {
	return net.Dial(network, address)
}
func (*Impl) DialIP(network string, laddr *net.IPAddr, raddr *net.IPAddr) (*net.IPConn, error) {
	return net.DialIP(network, laddr, raddr)
}
func (*Impl) DialTCP(network string, laddr *net.TCPAddr, raddr *net.TCPAddr) (*net.TCPConn, error) {
	return net.DialTCP(network, laddr, raddr)
}
func (*Impl) DialTimeout(network string, address string, timeout time.Duration) (net.Conn, error) {
	return net.DialTimeout(network, address, timeout)
}
func (*Impl) DialUDP(network string, laddr *net.UDPAddr, raddr *net.UDPAddr) (*net.UDPConn, error) {
	return net.DialUDP(network, laddr, raddr)
}
func (*Impl) DialUnix(network string, laddr *net.UnixAddr, raddr *net.UnixAddr) (*net.UnixConn, error) {
	return net.DialUnix(network, laddr, raddr)
}
func (*Impl) FileConn(f *os.File) (c net.Conn, err error) {
	return net.FileConn(f)
}
func (*Impl) FileListener(f *os.File) (ln net.Listener, err error) {
	return net.FileListener(f)
}
func (*Impl) FilePacketConn(f *os.File) (c net.PacketConn, err error) {
	return net.FilePacketConn(f)
}
func (*Impl) IPv4(a byte, b byte, c byte, d byte) net.IP {
	return net.IPv4(a, b, c, d)
}
func (*Impl) IPv4Mask(a byte, b byte, c byte, d byte) net.IPMask {
	return net.IPv4Mask(a, b, c, d)
}
func (*Impl) InterfaceAddrs() ([]net.Addr, error) {
	return net.InterfaceAddrs()
}
func (*Impl) InterfaceByIndex(index int) (*net.Interface, error) {
	return net.InterfaceByIndex(index)
}
func (*Impl) InterfaceByName(name string) (*net.Interface, error) {
	return net.InterfaceByName(name)
}
func (*Impl) Interfaces() ([]net.Interface, error) {
	return net.Interfaces()
}
func (*Impl) JoinHostPort(host string, port string) string {
	return net.JoinHostPort(host, port)
}
func (*Impl) Listen(network string, address string) (net.Listener, error) {
	return net.Listen(network, address)
}
func (*Impl) ListenIP(network string, laddr *net.IPAddr) (*net.IPConn, error) {
	return net.ListenIP(network, laddr)
}
func (*Impl) ListenMulticastUDP(network string, ifi *net.Interface, gaddr *net.UDPAddr) (*net.UDPConn, error) {
	return net.ListenMulticastUDP(network, ifi, gaddr)
}
func (*Impl) ListenPacket(network string, address string) (net.PacketConn, error) {
	return net.ListenPacket(network, address)
}
func (*Impl) ListenTCP(network string, laddr *net.TCPAddr) (*net.TCPListener, error) {
	return net.ListenTCP(network, laddr)
}
func (*Impl) ListenUDP(network string, laddr *net.UDPAddr) (*net.UDPConn, error) {
	return net.ListenUDP(network, laddr)
}
func (*Impl) ListenUnix(network string, laddr *net.UnixAddr) (*net.UnixListener, error) {
	return net.ListenUnix(network, laddr)
}
func (*Impl) ListenUnixgram(network string, laddr *net.UnixAddr) (*net.UnixConn, error) {
	return net.ListenUnixgram(network, laddr)
}
func (*Impl) LookupAddr(addr string) (names []string, err error) {
	return net.LookupAddr(addr)
}
func (*Impl) LookupCNAME(host string) (cname string, err error) {
	return net.LookupCNAME(host)
}
func (*Impl) LookupHost(host string) (addrs []string, err error) {
	return net.LookupHost(host)
}
func (*Impl) LookupIP(host string) ([]net.IP, error) {
	return net.LookupIP(host)
}
func (*Impl) LookupMX(name string) ([]*net.MX, error) {
	return net.LookupMX(name)
}
func (*Impl) LookupNS(name string) ([]*net.NS, error) {
	return net.LookupNS(name)
}
func (*Impl) LookupPort(network string, service string) (port int, err error) {
	return net.LookupPort(network, service)
}
func (*Impl) LookupSRV(service string, proto string, name string) (cname string, addrs []*net.SRV, err error) {
	return net.LookupSRV(service, proto, name)
}
func (*Impl) LookupTXT(name string) ([]string, error) {
	return net.LookupTXT(name)
}
func (*Impl) ParseCIDR(s string) (net.IP, *net.IPNet, error) {
	return net.ParseCIDR(s)
}
func (*Impl) ParseIP(s string) net.IP {
	return net.ParseIP(s)
}
func (*Impl) ParseMAC(s string) (hw net.HardwareAddr, err error) {
	return net.ParseMAC(s)
}
func (*Impl) Pipe() (net.Conn, net.Conn) {
	return net.Pipe()
}
func (*Impl) ResolveIPAddr(network string, address string) (*net.IPAddr, error) {
	return net.ResolveIPAddr(network, address)
}
func (*Impl) ResolveTCPAddr(network string, address string) (*net.TCPAddr, error) {
	return net.ResolveTCPAddr(network, address)
}
func (*Impl) ResolveUDPAddr(network string, address string) (*net.UDPAddr, error) {
	return net.ResolveUDPAddr(network, address)
}
func (*Impl) ResolveUnixAddr(network string, address string) (*net.UnixAddr, error) {
	return net.ResolveUnixAddr(network, address)
}
func (*Impl) SplitHostPort(hostport string) (host string, port string, err error) {
	return net.SplitHostPort(hostport)
}
func (*Impl) TCPAddrFromAddrPort(addr netip.AddrPort) *net.TCPAddr {
	return net.TCPAddrFromAddrPort(addr)
}
func (*Impl) UDPAddrFromAddrPort(addr netip.AddrPort) *net.UDPAddr {
	return net.UDPAddrFromAddrPort(addr)
}
