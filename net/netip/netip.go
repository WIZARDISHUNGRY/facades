// Code generated by a tool. DO NOT EDIT.

// Package netip provides a mockable wrapper for net/netip.
package netip

import (
	netip "net/netip"
)

var _ Interface = &Impl{}
var _ = netip.AddrFrom16

type Interface interface {
	AddrFrom16(addr [16]byte) netip.Addr
	AddrFrom4(addr [4]byte) netip.Addr
	AddrFromSlice(slice []byte) (ip netip.Addr, ok bool)
	AddrPortFrom(ip netip.Addr, port uint16) netip.AddrPort
	IPv4Unspecified() netip.Addr
	IPv6LinkLocalAllNodes() netip.Addr
	IPv6Unspecified() netip.Addr
	MustParseAddr(s string) netip.Addr
	MustParseAddrPort(s string) netip.AddrPort
	MustParsePrefix(s string) netip.Prefix
	ParseAddr(s string) (netip.Addr, error)
	ParseAddrPort(s string) (netip.AddrPort, error)
	ParsePrefix(s string) (netip.Prefix, error)
	PrefixFrom(ip netip.Addr, bits int) netip.Prefix
}

type Impl struct{}

func (*Impl) AddrFrom16(addr [16]byte) netip.Addr {
	return netip.AddrFrom16(addr)
}
func (*Impl) AddrFrom4(addr [4]byte) netip.Addr {
	return netip.AddrFrom4(addr)
}
func (*Impl) AddrFromSlice(slice []byte) (ip netip.Addr, ok bool) {
	return netip.AddrFromSlice(slice)
}
func (*Impl) AddrPortFrom(ip netip.Addr, port uint16) netip.AddrPort {
	return netip.AddrPortFrom(ip, port)
}
func (*Impl) IPv4Unspecified() netip.Addr {
	return netip.IPv4Unspecified()
}
func (*Impl) IPv6LinkLocalAllNodes() netip.Addr {
	return netip.IPv6LinkLocalAllNodes()
}
func (*Impl) IPv6Unspecified() netip.Addr {
	return netip.IPv6Unspecified()
}
func (*Impl) MustParseAddr(s string) netip.Addr {
	return netip.MustParseAddr(s)
}
func (*Impl) MustParseAddrPort(s string) netip.AddrPort {
	return netip.MustParseAddrPort(s)
}
func (*Impl) MustParsePrefix(s string) netip.Prefix {
	return netip.MustParsePrefix(s)
}
func (*Impl) ParseAddr(s string) (netip.Addr, error) {
	return netip.ParseAddr(s)
}
func (*Impl) ParseAddrPort(s string) (netip.AddrPort, error) {
	return netip.ParseAddrPort(s)
}
func (*Impl) ParsePrefix(s string) (netip.Prefix, error) {
	return netip.ParsePrefix(s)
}
func (*Impl) PrefixFrom(ip netip.Addr, bits int) netip.Prefix {
	return netip.PrefixFrom(ip, bits)
}
