// Code generated by a tool. DO NOT EDIT.

// Package http provides a mockable wrapper for net/http.
package http

import (
	bufio "bufio"
	context "context"
	io "io"
	fs "io/fs"
	net "net"
	http "net/http"
	url "net/url"
	time "time"
)

var _ Interface = &Impl{}
var _ = http.AllowQuerySemicolons

type Interface interface {
	AllowQuerySemicolons(h http.Handler) http.Handler
	CanonicalHeaderKey(s string) string
	DetectContentType(data []byte) string
	Error(w http.ResponseWriter, error string, code int)
	FS(fsys fs.FS) http.FileSystem
	FileServer(root http.FileSystem) http.Handler
	Get(url string) (resp *http.Response, err error)
	Handle(pattern string, handler http.Handler)
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	Head(url string) (resp *http.Response, err error)
	ListenAndServe(addr string, handler http.Handler) error
	ListenAndServeTLS(addr string, certFile string, keyFile string, handler http.Handler) error
	MaxBytesHandler(h http.Handler, n int64) http.Handler
	MaxBytesReader(w http.ResponseWriter, r io.ReadCloser, n int64) io.ReadCloser
	NewFileTransport(fs http.FileSystem) http.RoundTripper
	NewRequest(method string, url string, body io.Reader) (*http.Request, error)
	NewRequestWithContext(ctx context.Context, method string, url string, body io.Reader) (*http.Request, error)
	NewServeMux() *http.ServeMux
	NotFound(w http.ResponseWriter, r *http.Request)
	NotFoundHandler() http.Handler
	ParseHTTPVersion(vers string) (major int, minor int, ok bool)
	ParseTime(text string) (t time.Time, err error)
	Post(url string, contentType string, body io.Reader) (resp *http.Response, err error)
	PostForm(url string, data url.Values) (resp *http.Response, err error)
	ProxyFromEnvironment(req *http.Request) (*url.URL, error)
	ProxyURL(fixedURL *url.URL) func(*http.Request) (*url.URL, error)
	ReadRequest(b *bufio.Reader) (*http.Request, error)
	ReadResponse(r *bufio.Reader, req *http.Request) (*http.Response, error)
	Redirect(w http.ResponseWriter, r *http.Request, url string, code int)
	RedirectHandler(url string, code int) http.Handler
	Serve(l net.Listener, handler http.Handler) error
	ServeContent(w http.ResponseWriter, req *http.Request, name string, modtime time.Time, content io.ReadSeeker)
	ServeFile(w http.ResponseWriter, r *http.Request, name string)
	ServeTLS(l net.Listener, handler http.Handler, certFile string, keyFile string) error
	SetCookie(w http.ResponseWriter, cookie *http.Cookie)
	StatusText(code int) string
	StripPrefix(prefix string, h http.Handler) http.Handler
	TimeoutHandler(h http.Handler, dt time.Duration, msg string) http.Handler
}

type Impl struct{}

func (*Impl) AllowQuerySemicolons(h http.Handler) http.Handler {
	return http.AllowQuerySemicolons(h)
}
func (*Impl) CanonicalHeaderKey(s string) string {
	return http.CanonicalHeaderKey(s)
}
func (*Impl) DetectContentType(data []byte) string {
	return http.DetectContentType(data)
}
func (*Impl) Error(w http.ResponseWriter, error string, code int) {
	http.Error(w, error, code)
}
func (*Impl) FS(fsys fs.FS) http.FileSystem {
	return http.FS(fsys)
}
func (*Impl) FileServer(root http.FileSystem) http.Handler {
	return http.FileServer(root)
}
func (*Impl) Get(url string) (resp *http.Response, err error) {
	return http.Get(url)
}
func (*Impl) Handle(pattern string, handler http.Handler) {
	http.Handle(pattern, handler)
}
func (*Impl) HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request)) {
	http.HandleFunc(pattern, handler)
}
func (*Impl) Head(url string) (resp *http.Response, err error) {
	return http.Head(url)
}
func (*Impl) ListenAndServe(addr string, handler http.Handler) error {
	return http.ListenAndServe(addr, handler)
}
func (*Impl) ListenAndServeTLS(addr string, certFile string, keyFile string, handler http.Handler) error {
	return http.ListenAndServeTLS(addr, certFile, keyFile, handler)
}
func (*Impl) MaxBytesHandler(h http.Handler, n int64) http.Handler {
	return http.MaxBytesHandler(h, n)
}
func (*Impl) MaxBytesReader(w http.ResponseWriter, r io.ReadCloser, n int64) io.ReadCloser {
	return http.MaxBytesReader(w, r, n)
}
func (*Impl) NewFileTransport(fs http.FileSystem) http.RoundTripper {
	return http.NewFileTransport(fs)
}
func (*Impl) NewRequest(method string, url string, body io.Reader) (*http.Request, error) {
	return http.NewRequest(method, url, body)
}
func (*Impl) NewRequestWithContext(ctx context.Context, method string, url string, body io.Reader) (*http.Request, error) {
	return http.NewRequestWithContext(ctx, method, url, body)
}
func (*Impl) NewServeMux() *http.ServeMux {
	return http.NewServeMux()
}
func (*Impl) NotFound(w http.ResponseWriter, r *http.Request) {
	http.NotFound(w, r)
}
func (*Impl) NotFoundHandler() http.Handler {
	return http.NotFoundHandler()
}
func (*Impl) ParseHTTPVersion(vers string) (major int, minor int, ok bool) {
	return http.ParseHTTPVersion(vers)
}
func (*Impl) ParseTime(text string) (t time.Time, err error) {
	return http.ParseTime(text)
}
func (*Impl) Post(url string, contentType string, body io.Reader) (resp *http.Response, err error) {
	return http.Post(url, contentType, body)
}
func (*Impl) PostForm(url string, data url.Values) (resp *http.Response, err error) {
	return http.PostForm(url, data)
}
func (*Impl) ProxyFromEnvironment(req *http.Request) (*url.URL, error) {
	return http.ProxyFromEnvironment(req)
}
func (*Impl) ProxyURL(fixedURL *url.URL) func(*http.Request) (*url.URL, error) {
	return http.ProxyURL(fixedURL)
}
func (*Impl) ReadRequest(b *bufio.Reader) (*http.Request, error) {
	return http.ReadRequest(b)
}
func (*Impl) ReadResponse(r *bufio.Reader, req *http.Request) (*http.Response, error) {
	return http.ReadResponse(r, req)
}
func (*Impl) Redirect(w http.ResponseWriter, r *http.Request, url string, code int) {
	http.Redirect(w, r, url, code)
}
func (*Impl) RedirectHandler(url string, code int) http.Handler {
	return http.RedirectHandler(url, code)
}
func (*Impl) Serve(l net.Listener, handler http.Handler) error {
	return http.Serve(l, handler)
}
func (*Impl) ServeContent(w http.ResponseWriter, req *http.Request, name string, modtime time.Time, content io.ReadSeeker) {
	http.ServeContent(w, req, name, modtime, content)
}
func (*Impl) ServeFile(w http.ResponseWriter, r *http.Request, name string) {
	http.ServeFile(w, r, name)
}
func (*Impl) ServeTLS(l net.Listener, handler http.Handler, certFile string, keyFile string) error {
	return http.ServeTLS(l, handler, certFile, keyFile)
}
func (*Impl) SetCookie(w http.ResponseWriter, cookie *http.Cookie) {
	http.SetCookie(w, cookie)
}
func (*Impl) StatusText(code int) string {
	return http.StatusText(code)
}
func (*Impl) StripPrefix(prefix string, h http.Handler) http.Handler {
	return http.StripPrefix(prefix, h)
}
func (*Impl) TimeoutHandler(h http.Handler, dt time.Duration, msg string) http.Handler {
	return http.TimeoutHandler(h, dt, msg)
}
