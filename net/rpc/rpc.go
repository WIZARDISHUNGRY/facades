// Code generated by a tool. DO NOT EDIT.

// Package rpc provides a mockable wrapper for net/rpc.
package rpc

import (
	io "io"
	net "net"
	rpc "net/rpc"
)

var _ Interface = &Impl{}
var _ = rpc.Accept

type Interface interface {
	Accept(lis net.Listener)
	Dial(network string, address string) (*rpc.Client, error)
	DialHTTP(network string, address string) (*rpc.Client, error)
	DialHTTPPath(network string, address string, path string) (*rpc.Client, error)
	HandleHTTP()
	NewClient(conn io.ReadWriteCloser) *rpc.Client
	NewClientWithCodec(codec rpc.ClientCodec) *rpc.Client
	NewServer() *rpc.Server
	Register(rcvr any) error
	RegisterName(name string, rcvr any) error
	ServeCodec(codec rpc.ServerCodec)
	ServeConn(conn io.ReadWriteCloser)
	ServeRequest(codec rpc.ServerCodec) error
}

type Impl struct{}

func (*Impl) Accept(lis net.Listener) {
	rpc.Accept(lis)
}
func (*Impl) Dial(network string, address string) (*rpc.Client, error) {
	return rpc.Dial(network, address)
}
func (*Impl) DialHTTP(network string, address string) (*rpc.Client, error) {
	return rpc.DialHTTP(network, address)
}
func (*Impl) DialHTTPPath(network string, address string, path string) (*rpc.Client, error) {
	return rpc.DialHTTPPath(network, address, path)
}
func (*Impl) HandleHTTP() {
	rpc.HandleHTTP()
}
func (*Impl) NewClient(conn io.ReadWriteCloser) *rpc.Client {
	return rpc.NewClient(conn)
}
func (*Impl) NewClientWithCodec(codec rpc.ClientCodec) *rpc.Client {
	return rpc.NewClientWithCodec(codec)
}
func (*Impl) NewServer() *rpc.Server {
	return rpc.NewServer()
}
func (*Impl) Register(rcvr any) error {
	return rpc.Register(rcvr)
}
func (*Impl) RegisterName(name string, rcvr any) error {
	return rpc.RegisterName(name, rcvr)
}
func (*Impl) ServeCodec(codec rpc.ServerCodec) {
	rpc.ServeCodec(codec)
}
func (*Impl) ServeConn(conn io.ReadWriteCloser) {
	rpc.ServeConn(conn)
}
func (*Impl) ServeRequest(codec rpc.ServerCodec) error {
	return rpc.ServeRequest(codec)
}
