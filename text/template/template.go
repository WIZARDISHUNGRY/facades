// Code generated by a tool. DO NOT EDIT.

// Package template provides a mockable wrapper for text/template.
package template

import (
	io "io"
	fs "io/fs"
	template "text/template"
)

var _ Interface = &Impl{}
var _ = template.HTMLEscape

type Interface interface {
	HTMLEscape(w io.Writer, b []byte)
	HTMLEscapeString(s string) string
	HTMLEscaper(args ...any) string
	IsTrue(val any) (truth bool, ok bool)
	JSEscape(w io.Writer, b []byte)
	JSEscapeString(s string) string
	JSEscaper(args ...any) string
	Must(t *template.Template, err error) *template.Template
	New(name string) *template.Template
	ParseFS(fsys fs.FS, patterns ...string) (*template.Template, error)
	ParseFiles(filenames ...string) (*template.Template, error)
	ParseGlob(pattern string) (*template.Template, error)
	URLQueryEscaper(args ...any) string
}

type Impl struct{}

func (*Impl) HTMLEscape(w io.Writer, b []byte) {
	template.HTMLEscape(w, b)
}
func (*Impl) HTMLEscapeString(s string) string {
	return template.HTMLEscapeString(s)
}
func (*Impl) HTMLEscaper(args ...any) string {
	return template.HTMLEscaper(args...)
}
func (*Impl) IsTrue(val any) (truth bool, ok bool) {
	return template.IsTrue(val)
}
func (*Impl) JSEscape(w io.Writer, b []byte) {
	template.JSEscape(w, b)
}
func (*Impl) JSEscapeString(s string) string {
	return template.JSEscapeString(s)
}
func (*Impl) JSEscaper(args ...any) string {
	return template.JSEscaper(args...)
}
func (*Impl) Must(t *template.Template, err error) *template.Template {
	return template.Must(t, err)
}
func (*Impl) New(name string) *template.Template {
	return template.New(name)
}
func (*Impl) ParseFS(fsys fs.FS, patterns ...string) (*template.Template, error) {
	return template.ParseFS(fsys, patterns...)
}
func (*Impl) ParseFiles(filenames ...string) (*template.Template, error) {
	return template.ParseFiles(filenames...)
}
func (*Impl) ParseGlob(pattern string) (*template.Template, error) {
	return template.ParseGlob(pattern)
}
func (*Impl) URLQueryEscaper(args ...any) string {
	return template.URLQueryEscaper(args...)
}
