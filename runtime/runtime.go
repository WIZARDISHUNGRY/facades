// Code generated by a tool. DO NOT EDIT.

// Package runtime provides a mockable wrapper for runtime.
package runtime

import (
	runtime "runtime"
	unsafe "unsafe"
)

var _ Interface = &Impl{}
var _ = runtime.BlockProfile

type Interface interface {
	BlockProfile(p []runtime.BlockProfileRecord) (n int, ok bool)
	Breakpoint()
	CPUProfile() []byte
	Caller(skip int) (pc uintptr, file string, line int, ok bool)
	Callers(skip int, pc []uintptr) int
	CallersFrames(callers []uintptr) *runtime.Frames
	FuncForPC(pc uintptr) *runtime.Func
	GC()
	GOMAXPROCS(n int) int
	GOROOT() string
	Goexit()
	GoroutineProfile(p []runtime.StackRecord) (n int, ok bool)
	Gosched()
	KeepAlive(x any)
	LockOSThread()
	MemProfile(p []runtime.MemProfileRecord, inuseZero bool) (n int, ok bool)
	MutexProfile(p []runtime.BlockProfileRecord) (n int, ok bool)
	NumCPU() int
	NumCgoCall() int64
	NumGoroutine() int
	ReadMemStats(m *runtime.MemStats)
	ReadTrace() []byte
	SetBlockProfileRate(rate int)
	SetCPUProfileRate(hz int)
	SetCgoTraceback(version int, traceback unsafe.Pointer, context unsafe.Pointer, symbolizer unsafe.Pointer)
	SetFinalizer(obj any, finalizer any)
	SetMutexProfileFraction(rate int) int
	Stack(buf []byte, all bool) int
	StartTrace() error
	StopTrace()
	ThreadCreateProfile(p []runtime.StackRecord) (n int, ok bool)
	UnlockOSThread()
	Version() string
}

type Impl struct{}

func (*Impl) BlockProfile(p []runtime.BlockProfileRecord) (n int, ok bool) {
	return runtime.BlockProfile(p)
}
func (*Impl) Breakpoint() {
	runtime.Breakpoint()
}
func (*Impl) CPUProfile() []byte {
	return runtime.CPUProfile()
}
func (*Impl) Caller(skip int) (pc uintptr, file string, line int, ok bool) {
	return runtime.Caller(skip)
}
func (*Impl) Callers(skip int, pc []uintptr) int {
	return runtime.Callers(skip, pc)
}
func (*Impl) CallersFrames(callers []uintptr) *runtime.Frames {
	return runtime.CallersFrames(callers)
}
func (*Impl) FuncForPC(pc uintptr) *runtime.Func {
	return runtime.FuncForPC(pc)
}
func (*Impl) GC() {
	runtime.GC()
}
func (*Impl) GOMAXPROCS(n int) int {
	return runtime.GOMAXPROCS(n)
}
func (*Impl) GOROOT() string {
	return runtime.GOROOT()
}
func (*Impl) Goexit() {
	runtime.Goexit()
}
func (*Impl) GoroutineProfile(p []runtime.StackRecord) (n int, ok bool) {
	return runtime.GoroutineProfile(p)
}
func (*Impl) Gosched() {
	runtime.Gosched()
}
func (*Impl) KeepAlive(x any) {
	runtime.KeepAlive(x)
}
func (*Impl) LockOSThread() {
	runtime.LockOSThread()
}
func (*Impl) MemProfile(p []runtime.MemProfileRecord, inuseZero bool) (n int, ok bool) {
	return runtime.MemProfile(p, inuseZero)
}
func (*Impl) MutexProfile(p []runtime.BlockProfileRecord) (n int, ok bool) {
	return runtime.MutexProfile(p)
}
func (*Impl) NumCPU() int {
	return runtime.NumCPU()
}
func (*Impl) NumCgoCall() int64 {
	return runtime.NumCgoCall()
}
func (*Impl) NumGoroutine() int {
	return runtime.NumGoroutine()
}
func (*Impl) ReadMemStats(m *runtime.MemStats) {
	runtime.ReadMemStats(m)
}
func (*Impl) ReadTrace() []byte {
	return runtime.ReadTrace()
}
func (*Impl) SetBlockProfileRate(rate int) {
	runtime.SetBlockProfileRate(rate)
}
func (*Impl) SetCPUProfileRate(hz int) {
	runtime.SetCPUProfileRate(hz)
}
func (*Impl) SetCgoTraceback(version int, traceback unsafe.Pointer, context unsafe.Pointer, symbolizer unsafe.Pointer) {
	runtime.SetCgoTraceback(version, traceback, context, symbolizer)
}
func (*Impl) SetFinalizer(obj any, finalizer any) {
	runtime.SetFinalizer(obj, finalizer)
}
func (*Impl) SetMutexProfileFraction(rate int) int {
	return runtime.SetMutexProfileFraction(rate)
}
func (*Impl) Stack(buf []byte, all bool) int {
	return runtime.Stack(buf, all)
}
func (*Impl) StartTrace() error {
	return runtime.StartTrace()
}
func (*Impl) StopTrace() {
	runtime.StopTrace()
}
func (*Impl) ThreadCreateProfile(p []runtime.StackRecord) (n int, ok bool) {
	return runtime.ThreadCreateProfile(p)
}
func (*Impl) UnlockOSThread() {
	runtime.UnlockOSThread()
}
func (*Impl) Version() string {
	return runtime.Version()
}
