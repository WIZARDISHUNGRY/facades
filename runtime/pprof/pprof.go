// Code generated by a tool. DO NOT EDIT.

// Package pprof provides a mockable wrapper for runtime/pprof.
package pprof

import (
	context "context"
	io "io"
	pprof "runtime/pprof"
)

var _ Interface = &Impl{}
var _ = pprof.Do

type Interface interface {
	Do(ctx context.Context, labels pprof.LabelSet, f func(context.Context))
	ForLabels(ctx context.Context, f func(key string, value string) bool)
	Label(ctx context.Context, key string) (string, bool)
	Labels(args ...string) pprof.LabelSet
	Lookup(name string) *pprof.Profile
	NewProfile(name string) *pprof.Profile
	Profiles() []*pprof.Profile
	SetGoroutineLabels(ctx context.Context)
	StartCPUProfile(w io.Writer) error
	StopCPUProfile()
	WithLabels(ctx context.Context, labels pprof.LabelSet) context.Context
	WriteHeapProfile(w io.Writer) error
}

type Impl struct{}

func (*Impl) Do(ctx context.Context, labels pprof.LabelSet, f func(context.Context)) {
	pprof.Do(ctx, labels, f)
}
func (*Impl) ForLabels(ctx context.Context, f func(key string, value string) bool) {
	pprof.ForLabels(ctx, f)
}
func (*Impl) Label(ctx context.Context, key string) (string, bool) {
	return pprof.Label(ctx, key)
}
func (*Impl) Labels(args ...string) pprof.LabelSet {
	return pprof.Labels(args...)
}
func (*Impl) Lookup(name string) *pprof.Profile {
	return pprof.Lookup(name)
}
func (*Impl) NewProfile(name string) *pprof.Profile {
	return pprof.NewProfile(name)
}
func (*Impl) Profiles() []*pprof.Profile {
	return pprof.Profiles()
}
func (*Impl) SetGoroutineLabels(ctx context.Context) {
	pprof.SetGoroutineLabels(ctx)
}
func (*Impl) StartCPUProfile(w io.Writer) error {
	return pprof.StartCPUProfile(w)
}
func (*Impl) StopCPUProfile() {
	pprof.StopCPUProfile()
}
func (*Impl) WithLabels(ctx context.Context, labels pprof.LabelSet) context.Context {
	return pprof.WithLabels(ctx, labels)
}
func (*Impl) WriteHeapProfile(w io.Writer) error {
	return pprof.WriteHeapProfile(w)
}
