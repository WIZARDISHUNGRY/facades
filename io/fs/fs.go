// Code generated by a tool. DO NOT EDIT.

// Package fs provides a mockable wrapper for io/fs.
package fs

import (
	fs "io/fs"
)

var _ Interface = &Impl{}
var _ = fs.FileInfoToDirEntry

type Interface interface {
	FileInfoToDirEntry(info fs.FileInfo) fs.DirEntry
	Glob(fsys fs.FS, pattern string) (matches []string, err error)
	ReadDir(fsys fs.FS, name string) ([]fs.DirEntry, error)
	ReadFile(fsys fs.FS, name string) ([]byte, error)
	Stat(fsys fs.FS, name string) (fs.FileInfo, error)
	Sub(fsys fs.FS, dir string) (fs.FS, error)
	ValidPath(name string) bool
	WalkDir(fsys fs.FS, root string, fn fs.WalkDirFunc) error
}

type Impl struct{}

func (*Impl) FileInfoToDirEntry(info fs.FileInfo) fs.DirEntry {
	return fs.FileInfoToDirEntry(info)
}
func (*Impl) Glob(fsys fs.FS, pattern string) (matches []string, err error) {
	return fs.Glob(fsys, pattern)
}
func (*Impl) ReadDir(fsys fs.FS, name string) ([]fs.DirEntry, error) {
	return fs.ReadDir(fsys, name)
}
func (*Impl) ReadFile(fsys fs.FS, name string) ([]byte, error) {
	return fs.ReadFile(fsys, name)
}
func (*Impl) Stat(fsys fs.FS, name string) (fs.FileInfo, error) {
	return fs.Stat(fsys, name)
}
func (*Impl) Sub(fsys fs.FS, dir string) (fs.FS, error) {
	return fs.Sub(fsys, dir)
}
func (*Impl) ValidPath(name string) bool {
	return fs.ValidPath(name)
}
func (*Impl) WalkDir(fsys fs.FS, root string, fn fs.WalkDirFunc) error {
	return fs.WalkDir(fsys, root, fn)
}
