// Code generated by a tool. DO NOT EDIT.

// Package io provides a mockable wrapper for io.
package io

import (
	io "io"
)

var _ Interface = &Impl{}
var _ = io.Copy

type Interface interface {
	Copy(dst io.Writer, src io.Reader) (written int64, err error)
	CopyBuffer(dst io.Writer, src io.Reader, buf []byte) (written int64, err error)
	CopyN(dst io.Writer, src io.Reader, n int64) (written int64, err error)
	LimitReader(r io.Reader, n int64) io.Reader
	MultiReader(readers ...io.Reader) io.Reader
	MultiWriter(writers ...io.Writer) io.Writer
	NewSectionReader(r io.ReaderAt, off int64, n int64) *io.SectionReader
	NopCloser(r io.Reader) io.ReadCloser
	Pipe() (*io.PipeReader, *io.PipeWriter)
	ReadAll(r io.Reader) ([]byte, error)
	ReadAtLeast(r io.Reader, buf []byte, min int) (n int, err error)
	ReadFull(r io.Reader, buf []byte) (n int, err error)
	TeeReader(r io.Reader, w io.Writer) io.Reader
	WriteString(w io.Writer, s string) (n int, err error)
}

type Impl struct{}

func (*Impl) Copy(dst io.Writer, src io.Reader) (written int64, err error) {
	return io.Copy(dst, src)
}
func (*Impl) CopyBuffer(dst io.Writer, src io.Reader, buf []byte) (written int64, err error) {
	return io.CopyBuffer(dst, src, buf)
}
func (*Impl) CopyN(dst io.Writer, src io.Reader, n int64) (written int64, err error) {
	return io.CopyN(dst, src, n)
}
func (*Impl) LimitReader(r io.Reader, n int64) io.Reader {
	return io.LimitReader(r, n)
}
func (*Impl) MultiReader(readers ...io.Reader) io.Reader {
	return io.MultiReader(readers...)
}
func (*Impl) MultiWriter(writers ...io.Writer) io.Writer {
	return io.MultiWriter(writers...)
}
func (*Impl) NewSectionReader(r io.ReaderAt, off int64, n int64) *io.SectionReader {
	return io.NewSectionReader(r, off, n)
}
func (*Impl) NopCloser(r io.Reader) io.ReadCloser {
	return io.NopCloser(r)
}
func (*Impl) Pipe() (*io.PipeReader, *io.PipeWriter) {
	return io.Pipe()
}
func (*Impl) ReadAll(r io.Reader) ([]byte, error) {
	return io.ReadAll(r)
}
func (*Impl) ReadAtLeast(r io.Reader, buf []byte, min int) (n int, err error) {
	return io.ReadAtLeast(r, buf, min)
}
func (*Impl) ReadFull(r io.Reader, buf []byte) (n int, err error) {
	return io.ReadFull(r, buf)
}
func (*Impl) TeeReader(r io.Reader, w io.Writer) io.Reader {
	return io.TeeReader(r, w)
}
func (*Impl) WriteString(w io.Writer, s string) (n int, err error) {
	return io.WriteString(w, s)
}
