// Code generated by a tool. DO NOT EDIT.

// Package xml provides a mockable wrapper for encoding/xml.
package xml

import (
	xml "encoding/xml"
	io "io"
)

var _ Interface = &Impl{}
var _ = xml.CopyToken

type Interface interface {
	CopyToken(t xml.Token) xml.Token
	Escape(w io.Writer, s []byte)
	EscapeText(w io.Writer, s []byte) error
	Marshal(v any) ([]byte, error)
	MarshalIndent(v any, prefix string, indent string) ([]byte, error)
	NewDecoder(r io.Reader) *xml.Decoder
	NewEncoder(w io.Writer) *xml.Encoder
	NewTokenDecoder(t xml.TokenReader) *xml.Decoder
	Unmarshal(data []byte, v any) error
}

type Impl struct{}

func (*Impl) CopyToken(t xml.Token) xml.Token {
	return xml.CopyToken(t)
}
func (*Impl) Escape(w io.Writer, s []byte) {
	xml.Escape(w, s)
}
func (*Impl) EscapeText(w io.Writer, s []byte) error {
	return xml.EscapeText(w, s)
}
func (*Impl) Marshal(v any) ([]byte, error) {
	return xml.Marshal(v)
}
func (*Impl) MarshalIndent(v any, prefix string, indent string) ([]byte, error) {
	return xml.MarshalIndent(v, prefix, indent)
}
func (*Impl) NewDecoder(r io.Reader) *xml.Decoder {
	return xml.NewDecoder(r)
}
func (*Impl) NewEncoder(w io.Writer) *xml.Encoder {
	return xml.NewEncoder(w)
}
func (*Impl) NewTokenDecoder(t xml.TokenReader) *xml.Decoder {
	return xml.NewTokenDecoder(t)
}
func (*Impl) Unmarshal(data []byte, v any) error {
	return xml.Unmarshal(data, v)
}
