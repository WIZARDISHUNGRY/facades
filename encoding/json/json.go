// Code generated by a tool. DO NOT EDIT.

// Package json provides a mockable wrapper for encoding/json.
package json

import (
	bytes "bytes"
	json "encoding/json"
	io "io"
)

var _ Interface = &Impl{}
var _ = json.Compact

type Interface interface {
	Compact(dst *bytes.Buffer, src []byte) error
	HTMLEscape(dst *bytes.Buffer, src []byte)
	Indent(dst *bytes.Buffer, src []byte, prefix string, indent string) error
	Marshal(v any) ([]byte, error)
	MarshalIndent(v any, prefix string, indent string) ([]byte, error)
	NewDecoder(r io.Reader) *json.Decoder
	NewEncoder(w io.Writer) *json.Encoder
	Unmarshal(data []byte, v any) error
	Valid(data []byte) bool
}

type Impl struct{}

func (*Impl) Compact(dst *bytes.Buffer, src []byte) error {
	return json.Compact(dst, src)
}
func (*Impl) HTMLEscape(dst *bytes.Buffer, src []byte) {
	json.HTMLEscape(dst, src)
}
func (*Impl) Indent(dst *bytes.Buffer, src []byte, prefix string, indent string) error {
	return json.Indent(dst, src, prefix, indent)
}
func (*Impl) Marshal(v any) ([]byte, error) {
	return json.Marshal(v)
}
func (*Impl) MarshalIndent(v any, prefix string, indent string) ([]byte, error) {
	return json.MarshalIndent(v, prefix, indent)
}
func (*Impl) NewDecoder(r io.Reader) *json.Decoder {
	return json.NewDecoder(r)
}
func (*Impl) NewEncoder(w io.Writer) *json.Encoder {
	return json.NewEncoder(w)
}
func (*Impl) Unmarshal(data []byte, v any) error {
	return json.Unmarshal(data, v)
}
func (*Impl) Valid(data []byte) bool {
	return json.Valid(data)
}
