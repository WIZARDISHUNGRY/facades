// Code generated by a tool. DO NOT EDIT.

// Package binary provides a mockable wrapper for encoding/binary.
package binary

import (
	binary "encoding/binary"
	io "io"
)

var _ Interface = &Impl{}
var _ = binary.PutUvarint

type Interface interface {
	PutUvarint(buf []byte, x uint64) int
	PutVarint(buf []byte, x int64) int
	Read(r io.Reader, order binary.ByteOrder, data any) error
	ReadUvarint(r io.ByteReader) (uint64, error)
	ReadVarint(r io.ByteReader) (int64, error)
	Size(v any) int
	Uvarint(buf []byte) (uint64, int)
	Varint(buf []byte) (int64, int)
	Write(w io.Writer, order binary.ByteOrder, data any) error
}

type Impl struct{}

func (*Impl) PutUvarint(buf []byte, x uint64) int {
	return binary.PutUvarint(buf, x)
}
func (*Impl) PutVarint(buf []byte, x int64) int {
	return binary.PutVarint(buf, x)
}
func (*Impl) Read(r io.Reader, order binary.ByteOrder, data any) error {
	return binary.Read(r, order, data)
}
func (*Impl) ReadUvarint(r io.ByteReader) (uint64, error) {
	return binary.ReadUvarint(r)
}
func (*Impl) ReadVarint(r io.ByteReader) (int64, error) {
	return binary.ReadVarint(r)
}
func (*Impl) Size(v any) int {
	return binary.Size(v)
}
func (*Impl) Uvarint(buf []byte) (uint64, int) {
	return binary.Uvarint(buf)
}
func (*Impl) Varint(buf []byte) (int64, int) {
	return binary.Varint(buf)
}
func (*Impl) Write(w io.Writer, order binary.ByteOrder, data any) error {
	return binary.Write(w, order, data)
}
