// Code generated by a tool. DO NOT EDIT.

// Package hex provides a mockable wrapper for encoding/hex.
package hex

import (
	hex "encoding/hex"
	io "io"
)

var _ Interface = &Impl{}
var _ = hex.Decode

type Interface interface {
	Decode(dst []byte, src []byte) (int, error)
	DecodeString(s string) ([]byte, error)
	DecodedLen(x int) int
	Dump(data []byte) string
	Dumper(w io.Writer) io.WriteCloser
	Encode(dst []byte, src []byte) int
	EncodeToString(src []byte) string
	EncodedLen(n int) int
	NewDecoder(r io.Reader) io.Reader
	NewEncoder(w io.Writer) io.Writer
}

type Impl struct{}

func (*Impl) Decode(dst []byte, src []byte) (int, error) {
	return hex.Decode(dst, src)
}
func (*Impl) DecodeString(s string) ([]byte, error) {
	return hex.DecodeString(s)
}
func (*Impl) DecodedLen(x int) int {
	return hex.DecodedLen(x)
}
func (*Impl) Dump(data []byte) string {
	return hex.Dump(data)
}
func (*Impl) Dumper(w io.Writer) io.WriteCloser {
	return hex.Dumper(w)
}
func (*Impl) Encode(dst []byte, src []byte) int {
	return hex.Encode(dst, src)
}
func (*Impl) EncodeToString(src []byte) string {
	return hex.EncodeToString(src)
}
func (*Impl) EncodedLen(n int) int {
	return hex.EncodedLen(n)
}
func (*Impl) NewDecoder(r io.Reader) io.Reader {
	return hex.NewDecoder(r)
}
func (*Impl) NewEncoder(w io.Writer) io.Writer {
	return hex.NewEncoder(w)
}
