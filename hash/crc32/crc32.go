// Code generated by a tool. DO NOT EDIT.

// Package crc32 provides a mockable wrapper for hash/crc32.
package crc32

import (
	hash "hash"
	crc32 "hash/crc32"
)

var _ Interface = &Impl{}
var _ = crc32.Checksum

type Interface interface {
	Checksum(data []byte, tab *crc32.Table) uint32
	ChecksumIEEE(data []byte) uint32
	MakeTable(poly uint32) *crc32.Table
	New(tab *crc32.Table) hash.Hash32
	NewIEEE() hash.Hash32
	Update(crc uint32, tab *crc32.Table, p []byte) uint32
}

type Impl struct{}

func (*Impl) Checksum(data []byte, tab *crc32.Table) uint32 {
	return crc32.Checksum(data, tab)
}
func (*Impl) ChecksumIEEE(data []byte) uint32 {
	return crc32.ChecksumIEEE(data)
}
func (*Impl) MakeTable(poly uint32) *crc32.Table {
	return crc32.MakeTable(poly)
}
func (*Impl) New(tab *crc32.Table) hash.Hash32 {
	return crc32.New(tab)
}
func (*Impl) NewIEEE() hash.Hash32 {
	return crc32.NewIEEE()
}
func (*Impl) Update(crc uint32, tab *crc32.Table, p []byte) uint32 {
	return crc32.Update(crc, tab, p)
}
