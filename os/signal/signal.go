// Code generated by a tool. DO NOT EDIT.

// Package signal provides a mockable wrapper for os/signal.
package signal

import (
	context "context"
	os "os"
	signal "os/signal"
)

var _ Interface = &Impl{}
var _ = signal.Ignore

type Interface interface {
	Ignore(sig ...os.Signal)
	Ignored(sig os.Signal) bool
	Notify(c chan<- os.Signal, sig ...os.Signal)
	NotifyContext(parent context.Context, signals ...os.Signal) (ctx context.Context, stop context.CancelFunc)
	Reset(sig ...os.Signal)
	Stop(c chan<- os.Signal)
}

type Impl struct{}

func (*Impl) Ignore(sig ...os.Signal) {
	signal.Ignore(sig...)
}
func (*Impl) Ignored(sig os.Signal) bool {
	return signal.Ignored(sig)
}
func (*Impl) Notify(c chan<- os.Signal, sig ...os.Signal) {
	signal.Notify(c, sig...)
}
func (*Impl) NotifyContext(parent context.Context, signals ...os.Signal) (ctx context.Context, stop context.CancelFunc) {
	return signal.NotifyContext(parent, signals...)
}
func (*Impl) Reset(sig ...os.Signal) {
	signal.Reset(sig...)
}
func (*Impl) Stop(c chan<- os.Signal) {
	signal.Stop(c)
}
