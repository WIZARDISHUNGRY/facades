// Code generated by a tool. DO NOT EDIT.

// Package os provides a mockable wrapper for os.
package os

import (
	fs "io/fs"
	os "os"
	time "time"
)

var _ Interface = &Impl{}
var _ = os.Chdir

type Interface interface {
	Chdir(dir string) error
	Chmod(name string, mode fs.FileMode) error
	Chown(name string, uid int, gid int) error
	Chtimes(name string, atime time.Time, mtime time.Time) error
	Clearenv()
	Create(name string) (*os.File, error)
	CreateTemp(dir string, pattern string) (*os.File, error)
	DirFS(dir string) fs.FS
	Environ() []string
	Executable() (string, error)
	Exit(code int)
	Expand(s string, mapping func(string) string) string
	ExpandEnv(s string) string
	FindProcess(pid int) (*os.Process, error)
	Getegid() int
	Getenv(key string) string
	Geteuid() int
	Getgid() int
	Getgroups() ([]int, error)
	Getpagesize() int
	Getpid() int
	Getppid() int
	Getuid() int
	Getwd() (dir string, err error)
	Hostname() (name string, err error)
	IsExist(err error) bool
	IsNotExist(err error) bool
	IsPathSeparator(c uint8) bool
	IsPermission(err error) bool
	IsTimeout(err error) bool
	Lchown(name string, uid int, gid int) error
	Link(oldname string, newname string) error
	LookupEnv(key string) (string, bool)
	Lstat(name string) (fs.FileInfo, error)
	Mkdir(name string, perm fs.FileMode) error
	MkdirAll(path string, perm fs.FileMode) error
	MkdirTemp(dir string, pattern string) (string, error)
	NewFile(fd uintptr, name string) *os.File
	NewSyscallError(syscall string, err error) error
	Open(name string) (*os.File, error)
	OpenFile(name string, flag int, perm fs.FileMode) (*os.File, error)
	Pipe() (r *os.File, w *os.File, err error)
	ReadDir(name string) ([]fs.DirEntry, error)
	ReadFile(name string) ([]byte, error)
	Readlink(name string) (string, error)
	Remove(name string) error
	RemoveAll(path string) error
	Rename(oldpath string, newpath string) error
	SameFile(fi1 fs.FileInfo, fi2 fs.FileInfo) bool
	Setenv(key string, value string) error
	StartProcess(name string, argv []string, attr *os.ProcAttr) (*os.Process, error)
	Stat(name string) (fs.FileInfo, error)
	Symlink(oldname string, newname string) error
	TempDir() string
	Truncate(name string, size int64) error
	Unsetenv(key string) error
	UserCacheDir() (string, error)
	UserConfigDir() (string, error)
	UserHomeDir() (string, error)
	WriteFile(name string, data []byte, perm fs.FileMode) error
}

type Impl struct{}

func (*Impl) Chdir(dir string) error {
	return os.Chdir(dir)
}
func (*Impl) Chmod(name string, mode fs.FileMode) error {
	return os.Chmod(name, mode)
}
func (*Impl) Chown(name string, uid int, gid int) error {
	return os.Chown(name, uid, gid)
}
func (*Impl) Chtimes(name string, atime time.Time, mtime time.Time) error {
	return os.Chtimes(name, atime, mtime)
}
func (*Impl) Clearenv() {
	os.Clearenv()
}
func (*Impl) Create(name string) (*os.File, error) {
	return os.Create(name)
}
func (*Impl) CreateTemp(dir string, pattern string) (*os.File, error) {
	return os.CreateTemp(dir, pattern)
}
func (*Impl) DirFS(dir string) fs.FS {
	return os.DirFS(dir)
}
func (*Impl) Environ() []string {
	return os.Environ()
}
func (*Impl) Executable() (string, error) {
	return os.Executable()
}
func (*Impl) Exit(code int) {
	os.Exit(code)
}
func (*Impl) Expand(s string, mapping func(string) string) string {
	return os.Expand(s, mapping)
}
func (*Impl) ExpandEnv(s string) string {
	return os.ExpandEnv(s)
}
func (*Impl) FindProcess(pid int) (*os.Process, error) {
	return os.FindProcess(pid)
}
func (*Impl) Getegid() int {
	return os.Getegid()
}
func (*Impl) Getenv(key string) string {
	return os.Getenv(key)
}
func (*Impl) Geteuid() int {
	return os.Geteuid()
}
func (*Impl) Getgid() int {
	return os.Getgid()
}
func (*Impl) Getgroups() ([]int, error) {
	return os.Getgroups()
}
func (*Impl) Getpagesize() int {
	return os.Getpagesize()
}
func (*Impl) Getpid() int {
	return os.Getpid()
}
func (*Impl) Getppid() int {
	return os.Getppid()
}
func (*Impl) Getuid() int {
	return os.Getuid()
}
func (*Impl) Getwd() (dir string, err error) {
	return os.Getwd()
}
func (*Impl) Hostname() (name string, err error) {
	return os.Hostname()
}
func (*Impl) IsExist(err error) bool {
	return os.IsExist(err)
}
func (*Impl) IsNotExist(err error) bool {
	return os.IsNotExist(err)
}
func (*Impl) IsPathSeparator(c uint8) bool {
	return os.IsPathSeparator(c)
}
func (*Impl) IsPermission(err error) bool {
	return os.IsPermission(err)
}
func (*Impl) IsTimeout(err error) bool {
	return os.IsTimeout(err)
}
func (*Impl) Lchown(name string, uid int, gid int) error {
	return os.Lchown(name, uid, gid)
}
func (*Impl) Link(oldname string, newname string) error {
	return os.Link(oldname, newname)
}
func (*Impl) LookupEnv(key string) (string, bool) {
	return os.LookupEnv(key)
}
func (*Impl) Lstat(name string) (fs.FileInfo, error) {
	return os.Lstat(name)
}
func (*Impl) Mkdir(name string, perm fs.FileMode) error {
	return os.Mkdir(name, perm)
}
func (*Impl) MkdirAll(path string, perm fs.FileMode) error {
	return os.MkdirAll(path, perm)
}
func (*Impl) MkdirTemp(dir string, pattern string) (string, error) {
	return os.MkdirTemp(dir, pattern)
}
func (*Impl) NewFile(fd uintptr, name string) *os.File {
	return os.NewFile(fd, name)
}
func (*Impl) NewSyscallError(syscall string, err error) error {
	return os.NewSyscallError(syscall, err)
}
func (*Impl) Open(name string) (*os.File, error) {
	return os.Open(name)
}
func (*Impl) OpenFile(name string, flag int, perm fs.FileMode) (*os.File, error) {
	return os.OpenFile(name, flag, perm)
}
func (*Impl) Pipe() (r *os.File, w *os.File, err error) {
	return os.Pipe()
}
func (*Impl) ReadDir(name string) ([]fs.DirEntry, error) {
	return os.ReadDir(name)
}
func (*Impl) ReadFile(name string) ([]byte, error) {
	return os.ReadFile(name)
}
func (*Impl) Readlink(name string) (string, error) {
	return os.Readlink(name)
}
func (*Impl) Remove(name string) error {
	return os.Remove(name)
}
func (*Impl) RemoveAll(path string) error {
	return os.RemoveAll(path)
}
func (*Impl) Rename(oldpath string, newpath string) error {
	return os.Rename(oldpath, newpath)
}
func (*Impl) SameFile(fi1 fs.FileInfo, fi2 fs.FileInfo) bool {
	return os.SameFile(fi1, fi2)
}
func (*Impl) Setenv(key string, value string) error {
	return os.Setenv(key, value)
}
func (*Impl) StartProcess(name string, argv []string, attr *os.ProcAttr) (*os.Process, error) {
	return os.StartProcess(name, argv, attr)
}
func (*Impl) Stat(name string) (fs.FileInfo, error) {
	return os.Stat(name)
}
func (*Impl) Symlink(oldname string, newname string) error {
	return os.Symlink(oldname, newname)
}
func (*Impl) TempDir() string {
	return os.TempDir()
}
func (*Impl) Truncate(name string, size int64) error {
	return os.Truncate(name, size)
}
func (*Impl) Unsetenv(key string) error {
	return os.Unsetenv(key)
}
func (*Impl) UserCacheDir() (string, error) {
	return os.UserCacheDir()
}
func (*Impl) UserConfigDir() (string, error) {
	return os.UserConfigDir()
}
func (*Impl) UserHomeDir() (string, error) {
	return os.UserHomeDir()
}
func (*Impl) WriteFile(name string, data []byte, perm fs.FileMode) error {
	return os.WriteFile(name, data, perm)
}
