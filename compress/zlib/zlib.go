// Code generated by a tool. DO NOT EDIT.

// Package zlib provides a mockable wrapper for compress/zlib.
package zlib

import (
	zlib "compress/zlib"
	io "io"
)

var _ Interface = &Impl{}
var _ = zlib.NewReader

type Interface interface {
	NewReader(r io.Reader) (io.ReadCloser, error)
	NewReaderDict(r io.Reader, dict []byte) (io.ReadCloser, error)
	NewWriter(w io.Writer) *zlib.Writer
	NewWriterLevel(w io.Writer, level int) (*zlib.Writer, error)
	NewWriterLevelDict(w io.Writer, level int, dict []byte) (*zlib.Writer, error)
}

type Impl struct{}

func (*Impl) NewReader(r io.Reader) (io.ReadCloser, error) {
	return zlib.NewReader(r)
}
func (*Impl) NewReaderDict(r io.Reader, dict []byte) (io.ReadCloser, error) {
	return zlib.NewReaderDict(r, dict)
}
func (*Impl) NewWriter(w io.Writer) *zlib.Writer {
	return zlib.NewWriter(w)
}
func (*Impl) NewWriterLevel(w io.Writer, level int) (*zlib.Writer, error) {
	return zlib.NewWriterLevel(w, level)
}
func (*Impl) NewWriterLevelDict(w io.Writer, level int, dict []byte) (*zlib.Writer, error) {
	return zlib.NewWriterLevelDict(w, level, dict)
}
