// Code generated by a tool. DO NOT EDIT.

// Package atomic provides a mockable wrapper for sync/atomic.
package atomic

import (
	atomic "sync/atomic"
	unsafe "unsafe"
)

var _ Interface = &Impl{}
var _ = atomic.AddInt32

type Interface interface {
	AddInt32(addr *int32, delta int32) (new int32)
	AddInt64(addr *int64, delta int64) (new int64)
	AddUint32(addr *uint32, delta uint32) (new uint32)
	AddUint64(addr *uint64, delta uint64) (new uint64)
	AddUintptr(addr *uintptr, delta uintptr) (new uintptr)
	CompareAndSwapInt32(addr *int32, old int32, new int32) (swapped bool)
	CompareAndSwapInt64(addr *int64, old int64, new int64) (swapped bool)
	CompareAndSwapPointer(addr *unsafe.Pointer, old unsafe.Pointer, new unsafe.Pointer) (swapped bool)
	CompareAndSwapUint32(addr *uint32, old uint32, new uint32) (swapped bool)
	CompareAndSwapUint64(addr *uint64, old uint64, new uint64) (swapped bool)
	CompareAndSwapUintptr(addr *uintptr, old uintptr, new uintptr) (swapped bool)
	LoadInt32(addr *int32) (val int32)
	LoadInt64(addr *int64) (val int64)
	LoadPointer(addr *unsafe.Pointer) (val unsafe.Pointer)
	LoadUint32(addr *uint32) (val uint32)
	LoadUint64(addr *uint64) (val uint64)
	LoadUintptr(addr *uintptr) (val uintptr)
	StoreInt32(addr *int32, val int32)
	StoreInt64(addr *int64, val int64)
	StorePointer(addr *unsafe.Pointer, val unsafe.Pointer)
	StoreUint32(addr *uint32, val uint32)
	StoreUint64(addr *uint64, val uint64)
	StoreUintptr(addr *uintptr, val uintptr)
	SwapInt32(addr *int32, new int32) (old int32)
	SwapInt64(addr *int64, new int64) (old int64)
	SwapPointer(addr *unsafe.Pointer, new unsafe.Pointer) (old unsafe.Pointer)
	SwapUint32(addr *uint32, new uint32) (old uint32)
	SwapUint64(addr *uint64, new uint64) (old uint64)
	SwapUintptr(addr *uintptr, new uintptr) (old uintptr)
}

type Impl struct{}

func (*Impl) AddInt32(addr *int32, delta int32) (new int32) {
	return atomic.AddInt32(addr, delta)
}
func (*Impl) AddInt64(addr *int64, delta int64) (new int64) {
	return atomic.AddInt64(addr, delta)
}
func (*Impl) AddUint32(addr *uint32, delta uint32) (new uint32) {
	return atomic.AddUint32(addr, delta)
}
func (*Impl) AddUint64(addr *uint64, delta uint64) (new uint64) {
	return atomic.AddUint64(addr, delta)
}
func (*Impl) AddUintptr(addr *uintptr, delta uintptr) (new uintptr) {
	return atomic.AddUintptr(addr, delta)
}
func (*Impl) CompareAndSwapInt32(addr *int32, old int32, new int32) (swapped bool) {
	return atomic.CompareAndSwapInt32(addr, old, new)
}
func (*Impl) CompareAndSwapInt64(addr *int64, old int64, new int64) (swapped bool) {
	return atomic.CompareAndSwapInt64(addr, old, new)
}
func (*Impl) CompareAndSwapPointer(addr *unsafe.Pointer, old unsafe.Pointer, new unsafe.Pointer) (swapped bool) {
	return atomic.CompareAndSwapPointer(addr, old, new)
}
func (*Impl) CompareAndSwapUint32(addr *uint32, old uint32, new uint32) (swapped bool) {
	return atomic.CompareAndSwapUint32(addr, old, new)
}
func (*Impl) CompareAndSwapUint64(addr *uint64, old uint64, new uint64) (swapped bool) {
	return atomic.CompareAndSwapUint64(addr, old, new)
}
func (*Impl) CompareAndSwapUintptr(addr *uintptr, old uintptr, new uintptr) (swapped bool) {
	return atomic.CompareAndSwapUintptr(addr, old, new)
}
func (*Impl) LoadInt32(addr *int32) (val int32) {
	return atomic.LoadInt32(addr)
}
func (*Impl) LoadInt64(addr *int64) (val int64) {
	return atomic.LoadInt64(addr)
}
func (*Impl) LoadPointer(addr *unsafe.Pointer) (val unsafe.Pointer) {
	return atomic.LoadPointer(addr)
}
func (*Impl) LoadUint32(addr *uint32) (val uint32) {
	return atomic.LoadUint32(addr)
}
func (*Impl) LoadUint64(addr *uint64) (val uint64) {
	return atomic.LoadUint64(addr)
}
func (*Impl) LoadUintptr(addr *uintptr) (val uintptr) {
	return atomic.LoadUintptr(addr)
}
func (*Impl) StoreInt32(addr *int32, val int32) {
	atomic.StoreInt32(addr, val)
}
func (*Impl) StoreInt64(addr *int64, val int64) {
	atomic.StoreInt64(addr, val)
}
func (*Impl) StorePointer(addr *unsafe.Pointer, val unsafe.Pointer) {
	atomic.StorePointer(addr, val)
}
func (*Impl) StoreUint32(addr *uint32, val uint32) {
	atomic.StoreUint32(addr, val)
}
func (*Impl) StoreUint64(addr *uint64, val uint64) {
	atomic.StoreUint64(addr, val)
}
func (*Impl) StoreUintptr(addr *uintptr, val uintptr) {
	atomic.StoreUintptr(addr, val)
}
func (*Impl) SwapInt32(addr *int32, new int32) (old int32) {
	return atomic.SwapInt32(addr, new)
}
func (*Impl) SwapInt64(addr *int64, new int64) (old int64) {
	return atomic.SwapInt64(addr, new)
}
func (*Impl) SwapPointer(addr *unsafe.Pointer, new unsafe.Pointer) (old unsafe.Pointer) {
	return atomic.SwapPointer(addr, new)
}
func (*Impl) SwapUint32(addr *uint32, new uint32) (old uint32) {
	return atomic.SwapUint32(addr, new)
}
func (*Impl) SwapUint64(addr *uint64, new uint64) (old uint64) {
	return atomic.SwapUint64(addr, new)
}
func (*Impl) SwapUintptr(addr *uintptr, new uintptr) (old uintptr) {
	return atomic.SwapUintptr(addr, new)
}
