// Code generated by a tool. DO NOT EDIT.

// Package strings provides a mockable wrapper for strings.
package strings

import (
	strings "strings"
	unicode "unicode"
)

var _ Interface = &Impl{}
var _ = strings.Clone

type Interface interface {
	Clone(s string) string
	Compare(a string, b string) int
	Contains(s string, substr string) bool
	ContainsAny(s string, chars string) bool
	ContainsRune(s string, r rune) bool
	Count(s string, substr string) int
	Cut(s string, sep string) (before string, after string, found bool)
	EqualFold(s string, t string) bool
	Fields(s string) []string
	FieldsFunc(s string, f func(rune) bool) []string
	HasPrefix(s string, prefix string) bool
	HasSuffix(s string, suffix string) bool
	Index(s string, substr string) int
	IndexAny(s string, chars string) int
	IndexByte(s string, c byte) int
	IndexFunc(s string, f func(rune) bool) int
	IndexRune(s string, r rune) int
	Join(elems []string, sep string) string
	LastIndex(s string, substr string) int
	LastIndexAny(s string, chars string) int
	LastIndexByte(s string, c byte) int
	LastIndexFunc(s string, f func(rune) bool) int
	Map(mapping func(rune) rune, s string) string
	NewReader(s string) *strings.Reader
	NewReplacer(oldnew ...string) *strings.Replacer
	Repeat(s string, count int) string
	Replace(s string, old string, new string, n int) string
	ReplaceAll(s string, old string, new string) string
	Split(s string, sep string) []string
	SplitAfter(s string, sep string) []string
	SplitAfterN(s string, sep string, n int) []string
	SplitN(s string, sep string, n int) []string
	Title(s string) string
	ToLower(s string) string
	ToLowerSpecial(c unicode.SpecialCase, s string) string
	ToTitle(s string) string
	ToTitleSpecial(c unicode.SpecialCase, s string) string
	ToUpper(s string) string
	ToUpperSpecial(c unicode.SpecialCase, s string) string
	ToValidUTF8(s string, replacement string) string
	Trim(s string, cutset string) string
	TrimFunc(s string, f func(rune) bool) string
	TrimLeft(s string, cutset string) string
	TrimLeftFunc(s string, f func(rune) bool) string
	TrimPrefix(s string, prefix string) string
	TrimRight(s string, cutset string) string
	TrimRightFunc(s string, f func(rune) bool) string
	TrimSpace(s string) string
	TrimSuffix(s string, suffix string) string
}

type Impl struct{}

func (*Impl) Clone(s string) string {
	return strings.Clone(s)
}
func (*Impl) Compare(a string, b string) int {
	return strings.Compare(a, b)
}
func (*Impl) Contains(s string, substr string) bool {
	return strings.Contains(s, substr)
}
func (*Impl) ContainsAny(s string, chars string) bool {
	return strings.ContainsAny(s, chars)
}
func (*Impl) ContainsRune(s string, r rune) bool {
	return strings.ContainsRune(s, r)
}
func (*Impl) Count(s string, substr string) int {
	return strings.Count(s, substr)
}
func (*Impl) Cut(s string, sep string) (before string, after string, found bool) {
	return strings.Cut(s, sep)
}
func (*Impl) EqualFold(s string, t string) bool {
	return strings.EqualFold(s, t)
}
func (*Impl) Fields(s string) []string {
	return strings.Fields(s)
}
func (*Impl) FieldsFunc(s string, f func(rune) bool) []string {
	return strings.FieldsFunc(s, f)
}
func (*Impl) HasPrefix(s string, prefix string) bool {
	return strings.HasPrefix(s, prefix)
}
func (*Impl) HasSuffix(s string, suffix string) bool {
	return strings.HasSuffix(s, suffix)
}
func (*Impl) Index(s string, substr string) int {
	return strings.Index(s, substr)
}
func (*Impl) IndexAny(s string, chars string) int {
	return strings.IndexAny(s, chars)
}
func (*Impl) IndexByte(s string, c byte) int {
	return strings.IndexByte(s, c)
}
func (*Impl) IndexFunc(s string, f func(rune) bool) int {
	return strings.IndexFunc(s, f)
}
func (*Impl) IndexRune(s string, r rune) int {
	return strings.IndexRune(s, r)
}
func (*Impl) Join(elems []string, sep string) string {
	return strings.Join(elems, sep)
}
func (*Impl) LastIndex(s string, substr string) int {
	return strings.LastIndex(s, substr)
}
func (*Impl) LastIndexAny(s string, chars string) int {
	return strings.LastIndexAny(s, chars)
}
func (*Impl) LastIndexByte(s string, c byte) int {
	return strings.LastIndexByte(s, c)
}
func (*Impl) LastIndexFunc(s string, f func(rune) bool) int {
	return strings.LastIndexFunc(s, f)
}
func (*Impl) Map(mapping func(rune) rune, s string) string {
	return strings.Map(mapping, s)
}
func (*Impl) NewReader(s string) *strings.Reader {
	return strings.NewReader(s)
}
func (*Impl) NewReplacer(oldnew ...string) *strings.Replacer {
	return strings.NewReplacer(oldnew...)
}
func (*Impl) Repeat(s string, count int) string {
	return strings.Repeat(s, count)
}
func (*Impl) Replace(s string, old string, new string, n int) string {
	return strings.Replace(s, old, new, n)
}
func (*Impl) ReplaceAll(s string, old string, new string) string {
	return strings.ReplaceAll(s, old, new)
}
func (*Impl) Split(s string, sep string) []string {
	return strings.Split(s, sep)
}
func (*Impl) SplitAfter(s string, sep string) []string {
	return strings.SplitAfter(s, sep)
}
func (*Impl) SplitAfterN(s string, sep string, n int) []string {
	return strings.SplitAfterN(s, sep, n)
}
func (*Impl) SplitN(s string, sep string, n int) []string {
	return strings.SplitN(s, sep, n)
}
func (*Impl) Title(s string) string {
	return strings.Title(s)
}
func (*Impl) ToLower(s string) string {
	return strings.ToLower(s)
}
func (*Impl) ToLowerSpecial(c unicode.SpecialCase, s string) string {
	return strings.ToLowerSpecial(c, s)
}
func (*Impl) ToTitle(s string) string {
	return strings.ToTitle(s)
}
func (*Impl) ToTitleSpecial(c unicode.SpecialCase, s string) string {
	return strings.ToTitleSpecial(c, s)
}
func (*Impl) ToUpper(s string) string {
	return strings.ToUpper(s)
}
func (*Impl) ToUpperSpecial(c unicode.SpecialCase, s string) string {
	return strings.ToUpperSpecial(c, s)
}
func (*Impl) ToValidUTF8(s string, replacement string) string {
	return strings.ToValidUTF8(s, replacement)
}
func (*Impl) Trim(s string, cutset string) string {
	return strings.Trim(s, cutset)
}
func (*Impl) TrimFunc(s string, f func(rune) bool) string {
	return strings.TrimFunc(s, f)
}
func (*Impl) TrimLeft(s string, cutset string) string {
	return strings.TrimLeft(s, cutset)
}
func (*Impl) TrimLeftFunc(s string, f func(rune) bool) string {
	return strings.TrimLeftFunc(s, f)
}
func (*Impl) TrimPrefix(s string, prefix string) string {
	return strings.TrimPrefix(s, prefix)
}
func (*Impl) TrimRight(s string, cutset string) string {
	return strings.TrimRight(s, cutset)
}
func (*Impl) TrimRightFunc(s string, f func(rune) bool) string {
	return strings.TrimRightFunc(s, f)
}
func (*Impl) TrimSpace(s string) string {
	return strings.TrimSpace(s)
}
func (*Impl) TrimSuffix(s string, suffix string) string {
	return strings.TrimSuffix(s, suffix)
}
