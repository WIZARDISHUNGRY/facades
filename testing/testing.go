// Code generated by a tool. DO NOT EDIT.

// Package testing provides a mockable wrapper for testing.
package testing

import (
	testing "testing"
)

var _ Interface = &Impl{}
var _ = testing.AllocsPerRun

type Interface interface {
	AllocsPerRun(runs int, f func()) (avg float64)
	Benchmark(f func(b *testing.B)) testing.BenchmarkResult
	CoverMode() string
	Coverage() float64
	Init()
	Main(matchString func(pat string, str string) (bool, error), tests []testing.InternalTest, benchmarks []testing.InternalBenchmark, examples []testing.InternalExample)
	RegisterCover(c testing.Cover)
	RunBenchmarks(matchString func(pat string, str string) (bool, error), benchmarks []testing.InternalBenchmark)
	RunExamples(matchString func(pat string, str string) (bool, error), examples []testing.InternalExample) (ok bool)
	RunTests(matchString func(pat string, str string) (bool, error), tests []testing.InternalTest) (ok bool)
	Short() bool
	Verbose() bool
}

type Impl struct{}

func (*Impl) AllocsPerRun(runs int, f func()) (avg float64) {
	return testing.AllocsPerRun(runs, f)
}
func (*Impl) Benchmark(f func(b *testing.B)) testing.BenchmarkResult {
	return testing.Benchmark(f)
}
func (*Impl) CoverMode() string {
	return testing.CoverMode()
}
func (*Impl) Coverage() float64 {
	return testing.Coverage()
}
func (*Impl) Init() {
	testing.Init()
}
func (*Impl) Main(matchString func(pat string, str string) (bool, error), tests []testing.InternalTest, benchmarks []testing.InternalBenchmark, examples []testing.InternalExample) {
	testing.Main(matchString, tests, benchmarks, examples)
}
func (*Impl) RegisterCover(c testing.Cover) {
	testing.RegisterCover(c)
}
func (*Impl) RunBenchmarks(matchString func(pat string, str string) (bool, error), benchmarks []testing.InternalBenchmark) {
	testing.RunBenchmarks(matchString, benchmarks)
}
func (*Impl) RunExamples(matchString func(pat string, str string) (bool, error), examples []testing.InternalExample) (ok bool) {
	return testing.RunExamples(matchString, examples)
}
func (*Impl) RunTests(matchString func(pat string, str string) (bool, error), tests []testing.InternalTest) (ok bool) {
	return testing.RunTests(matchString, tests)
}
func (*Impl) Short() bool {
	return testing.Short()
}
func (*Impl) Verbose() bool {
	return testing.Verbose()
}
