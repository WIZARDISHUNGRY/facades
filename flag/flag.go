// Code generated by a tool. DO NOT EDIT.

// Package flag provides a mockable wrapper for flag.
package flag

import (
	flag "flag"
	time "time"
)

var _ Interface = &Impl{}
var _ = flag.Arg

type Interface interface {
	Arg(i int) string
	Args() []string
	Bool(name string, value bool, usage string) *bool
	BoolVar(p *bool, name string, value bool, usage string)
	Duration(name string, value time.Duration, usage string) *time.Duration
	DurationVar(p *time.Duration, name string, value time.Duration, usage string)
	Float64(name string, value float64, usage string) *float64
	Float64Var(p *float64, name string, value float64, usage string)
	Func(name string, usage string, fn func(string) error)
	Int(name string, value int, usage string) *int
	Int64(name string, value int64, usage string) *int64
	Int64Var(p *int64, name string, value int64, usage string)
	IntVar(p *int, name string, value int, usage string)
	Lookup(name string) *flag.Flag
	NArg() int
	NFlag() int
	NewFlagSet(name string, errorHandling flag.ErrorHandling) *flag.FlagSet
	Parse()
	Parsed() bool
	PrintDefaults()
	Set(name string, value string) error
	String(name string, value string, usage string) *string
	StringVar(p *string, name string, value string, usage string)
	Uint(name string, value uint, usage string) *uint
	Uint64(name string, value uint64, usage string) *uint64
	Uint64Var(p *uint64, name string, value uint64, usage string)
	UintVar(p *uint, name string, value uint, usage string)
	UnquoteUsage(flag *flag.Flag) (name string, usage string)
	Usage()
	Var(value flag.Value, name string, usage string)
	Visit(fn func(*flag.Flag))
	VisitAll(fn func(*flag.Flag))
}

type Impl struct{}

func (*Impl) Arg(i int) string {
	return flag.Arg(i)
}
func (*Impl) Args() []string {
	return flag.Args()
}
func (*Impl) Bool(name string, value bool, usage string) *bool {
	return flag.Bool(name, value, usage)
}
func (*Impl) BoolVar(p *bool, name string, value bool, usage string) {
	flag.BoolVar(p, name, value, usage)
}
func (*Impl) Duration(name string, value time.Duration, usage string) *time.Duration {
	return flag.Duration(name, value, usage)
}
func (*Impl) DurationVar(p *time.Duration, name string, value time.Duration, usage string) {
	flag.DurationVar(p, name, value, usage)
}
func (*Impl) Float64(name string, value float64, usage string) *float64 {
	return flag.Float64(name, value, usage)
}
func (*Impl) Float64Var(p *float64, name string, value float64, usage string) {
	flag.Float64Var(p, name, value, usage)
}
func (*Impl) Func(name string, usage string, fn func(string) error) {
	flag.Func(name, usage, fn)
}
func (*Impl) Int(name string, value int, usage string) *int {
	return flag.Int(name, value, usage)
}
func (*Impl) Int64(name string, value int64, usage string) *int64 {
	return flag.Int64(name, value, usage)
}
func (*Impl) Int64Var(p *int64, name string, value int64, usage string) {
	flag.Int64Var(p, name, value, usage)
}
func (*Impl) IntVar(p *int, name string, value int, usage string) {
	flag.IntVar(p, name, value, usage)
}
func (*Impl) Lookup(name string) *flag.Flag {
	return flag.Lookup(name)
}
func (*Impl) NArg() int {
	return flag.NArg()
}
func (*Impl) NFlag() int {
	return flag.NFlag()
}
func (*Impl) NewFlagSet(name string, errorHandling flag.ErrorHandling) *flag.FlagSet {
	return flag.NewFlagSet(name, errorHandling)
}
func (*Impl) Parse() {
	flag.Parse()
}
func (*Impl) Parsed() bool {
	return flag.Parsed()
}
func (*Impl) PrintDefaults() {
	flag.PrintDefaults()
}
func (*Impl) Set(name string, value string) error {
	return flag.Set(name, value)
}
func (*Impl) String(name string, value string, usage string) *string {
	return flag.String(name, value, usage)
}
func (*Impl) StringVar(p *string, name string, value string, usage string) {
	flag.StringVar(p, name, value, usage)
}
func (*Impl) Uint(name string, value uint, usage string) *uint {
	return flag.Uint(name, value, usage)
}
func (*Impl) Uint64(name string, value uint64, usage string) *uint64 {
	return flag.Uint64(name, value, usage)
}
func (*Impl) Uint64Var(p *uint64, name string, value uint64, usage string) {
	flag.Uint64Var(p, name, value, usage)
}
func (*Impl) UintVar(p *uint, name string, value uint, usage string) {
	flag.UintVar(p, name, value, usage)
}
func (*Impl) UnquoteUsage(flag_v *flag.Flag) (name string, usage string) {
	return flag.UnquoteUsage(flag_v)
}
func (*Impl) Usage() {
	flag.Usage()
}
func (*Impl) Var(value flag.Value, name string, usage string) {
	flag.Var(value, name, usage)
}
func (*Impl) Visit(fn func(*flag.Flag)) {
	flag.Visit(fn)
}
func (*Impl) VisitAll(fn func(*flag.Flag)) {
	flag.VisitAll(fn)
}
