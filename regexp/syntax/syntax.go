// Code generated by a tool. DO NOT EDIT.

// Package syntax provides a mockable wrapper for regexp/syntax.
package syntax

import (
	syntax "regexp/syntax"
)

var _ Interface = &Impl{}
var _ = syntax.Compile

type Interface interface {
	Compile(re *syntax.Regexp) (*syntax.Prog, error)
	EmptyOpContext(r1 rune, r2 rune) syntax.EmptyOp
	IsWordChar(r rune) bool
	Parse(s string, flags syntax.Flags) (*syntax.Regexp, error)
}

type Impl struct{}

func (*Impl) Compile(re *syntax.Regexp) (*syntax.Prog, error) {
	return syntax.Compile(re)
}
func (*Impl) EmptyOpContext(r1 rune, r2 rune) syntax.EmptyOp {
	return syntax.EmptyOpContext(r1, r2)
}
func (*Impl) IsWordChar(r rune) bool {
	return syntax.IsWordChar(r)
}
func (*Impl) Parse(s string, flags syntax.Flags) (*syntax.Regexp, error) {
	return syntax.Parse(s, flags)
}
