// Code generated by a tool. DO NOT EDIT.

// Package elf provides a mockable wrapper for debug/elf.
package elf

import (
	elf "debug/elf"
	io "io"
)

var _ Interface = &Impl{}
var _ = elf.NewFile

type Interface interface {
	NewFile(r io.ReaderAt) (*elf.File, error)
	Open(name string) (*elf.File, error)
	R_INFO(sym uint32, typ uint32) uint64
	R_INFO32(sym uint32, typ uint32) uint32
	R_SYM32(info uint32) uint32
	R_SYM64(info uint64) uint32
	R_TYPE32(info uint32) uint32
	R_TYPE64(info uint64) uint32
	ST_BIND(info uint8) elf.SymBind
	ST_INFO(bind elf.SymBind, typ elf.SymType) uint8
	ST_TYPE(info uint8) elf.SymType
	ST_VISIBILITY(other uint8) elf.SymVis
}

type Impl struct{}

func (*Impl) NewFile(r io.ReaderAt) (*elf.File, error) {
	return elf.NewFile(r)
}
func (*Impl) Open(name string) (*elf.File, error) {
	return elf.Open(name)
}
func (*Impl) R_INFO(sym uint32, typ uint32) uint64 {
	return elf.R_INFO(sym, typ)
}
func (*Impl) R_INFO32(sym uint32, typ uint32) uint32 {
	return elf.R_INFO32(sym, typ)
}
func (*Impl) R_SYM32(info uint32) uint32 {
	return elf.R_SYM32(info)
}
func (*Impl) R_SYM64(info uint64) uint32 {
	return elf.R_SYM64(info)
}
func (*Impl) R_TYPE32(info uint32) uint32 {
	return elf.R_TYPE32(info)
}
func (*Impl) R_TYPE64(info uint64) uint32 {
	return elf.R_TYPE64(info)
}
func (*Impl) ST_BIND(info uint8) elf.SymBind {
	return elf.ST_BIND(info)
}
func (*Impl) ST_INFO(bind elf.SymBind, typ elf.SymType) uint8 {
	return elf.ST_INFO(bind, typ)
}
func (*Impl) ST_TYPE(info uint8) elf.SymType {
	return elf.ST_TYPE(info)
}
func (*Impl) ST_VISIBILITY(other uint8) elf.SymVis {
	return elf.ST_VISIBILITY(other)
}
