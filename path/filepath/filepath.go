// Code generated by a tool. DO NOT EDIT.

// Package filepath provides a mockable wrapper for path/filepath.
package filepath

import (
	fs "io/fs"
	filepath "path/filepath"
)

var _ Interface = &Impl{}
var _ = filepath.Abs

type Interface interface {
	Abs(path string) (string, error)
	Base(path string) string
	Clean(path string) string
	Dir(path string) string
	EvalSymlinks(path string) (string, error)
	Ext(path string) string
	FromSlash(path string) string
	Glob(pattern string) (matches []string, err error)
	HasPrefix(p string, prefix string) bool
	IsAbs(path string) bool
	Join(elem ...string) string
	Match(pattern string, name string) (matched bool, err error)
	Rel(basepath string, targpath string) (string, error)
	Split(path string) (dir string, file string)
	SplitList(path string) []string
	ToSlash(path string) string
	VolumeName(path string) string
	Walk(root string, fn filepath.WalkFunc) error
	WalkDir(root string, fn fs.WalkDirFunc) error
}

type Impl struct{}

func (*Impl) Abs(path string) (string, error) {
	return filepath.Abs(path)
}
func (*Impl) Base(path string) string {
	return filepath.Base(path)
}
func (*Impl) Clean(path string) string {
	return filepath.Clean(path)
}
func (*Impl) Dir(path string) string {
	return filepath.Dir(path)
}
func (*Impl) EvalSymlinks(path string) (string, error) {
	return filepath.EvalSymlinks(path)
}
func (*Impl) Ext(path string) string {
	return filepath.Ext(path)
}
func (*Impl) FromSlash(path string) string {
	return filepath.FromSlash(path)
}
func (*Impl) Glob(pattern string) (matches []string, err error) {
	return filepath.Glob(pattern)
}
func (*Impl) HasPrefix(p string, prefix string) bool {
	return filepath.HasPrefix(p, prefix)
}
func (*Impl) IsAbs(path string) bool {
	return filepath.IsAbs(path)
}
func (*Impl) Join(elem ...string) string {
	return filepath.Join(elem...)
}
func (*Impl) Match(pattern string, name string) (matched bool, err error) {
	return filepath.Match(pattern, name)
}
func (*Impl) Rel(basepath string, targpath string) (string, error) {
	return filepath.Rel(basepath, targpath)
}
func (*Impl) Split(path string) (dir string, file string) {
	return filepath.Split(path)
}
func (*Impl) SplitList(path string) []string {
	return filepath.SplitList(path)
}
func (*Impl) ToSlash(path string) string {
	return filepath.ToSlash(path)
}
func (*Impl) VolumeName(path string) string {
	return filepath.VolumeName(path)
}
func (*Impl) Walk(root string, fn filepath.WalkFunc) error {
	return filepath.Walk(root, fn)
}
func (*Impl) WalkDir(root string, fn fs.WalkDirFunc) error {
	return filepath.WalkDir(root, fn)
}
