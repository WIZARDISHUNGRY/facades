// Code generated by a tool. DO NOT EDIT.

// Package strconv provides a mockable wrapper for strconv.
package strconv

import (
	strconv "strconv"
)

var _ Interface = &Impl{}
var _ = strconv.AppendBool

type Interface interface {
	AppendBool(dst []byte, b bool) []byte
	AppendFloat(dst []byte, f float64, fmt byte, prec int, bitSize int) []byte
	AppendInt(dst []byte, i int64, base int) []byte
	AppendQuote(dst []byte, s string) []byte
	AppendQuoteRune(dst []byte, r rune) []byte
	AppendQuoteRuneToASCII(dst []byte, r rune) []byte
	AppendQuoteRuneToGraphic(dst []byte, r rune) []byte
	AppendQuoteToASCII(dst []byte, s string) []byte
	AppendQuoteToGraphic(dst []byte, s string) []byte
	AppendUint(dst []byte, i uint64, base int) []byte
	Atoi(s string) (int, error)
	CanBackquote(s string) bool
	FormatBool(b bool) string
	FormatComplex(c complex128, fmt byte, prec int, bitSize int) string
	FormatFloat(f float64, fmt byte, prec int, bitSize int) string
	FormatInt(i int64, base int) string
	FormatUint(i uint64, base int) string
	IsGraphic(r rune) bool
	IsPrint(r rune) bool
	Itoa(i int) string
	ParseBool(str string) (bool, error)
	ParseComplex(s string, bitSize int) (complex128, error)
	ParseFloat(s string, bitSize int) (float64, error)
	ParseInt(s string, base int, bitSize int) (i int64, err error)
	ParseUint(s string, base int, bitSize int) (uint64, error)
	Quote(s string) string
	QuoteRune(r rune) string
	QuoteRuneToASCII(r rune) string
	QuoteRuneToGraphic(r rune) string
	QuoteToASCII(s string) string
	QuoteToGraphic(s string) string
	QuotedPrefix(s string) (string, error)
	Unquote(s string) (string, error)
	UnquoteChar(s string, quote byte) (value rune, multibyte bool, tail string, err error)
}

type Impl struct{}

func (*Impl) AppendBool(dst []byte, b bool) []byte {
	return strconv.AppendBool(dst, b)
}
func (*Impl) AppendFloat(dst []byte, f float64, fmt byte, prec int, bitSize int) []byte {
	return strconv.AppendFloat(dst, f, fmt, prec, bitSize)
}
func (*Impl) AppendInt(dst []byte, i int64, base int) []byte {
	return strconv.AppendInt(dst, i, base)
}
func (*Impl) AppendQuote(dst []byte, s string) []byte {
	return strconv.AppendQuote(dst, s)
}
func (*Impl) AppendQuoteRune(dst []byte, r rune) []byte {
	return strconv.AppendQuoteRune(dst, r)
}
func (*Impl) AppendQuoteRuneToASCII(dst []byte, r rune) []byte {
	return strconv.AppendQuoteRuneToASCII(dst, r)
}
func (*Impl) AppendQuoteRuneToGraphic(dst []byte, r rune) []byte {
	return strconv.AppendQuoteRuneToGraphic(dst, r)
}
func (*Impl) AppendQuoteToASCII(dst []byte, s string) []byte {
	return strconv.AppendQuoteToASCII(dst, s)
}
func (*Impl) AppendQuoteToGraphic(dst []byte, s string) []byte {
	return strconv.AppendQuoteToGraphic(dst, s)
}
func (*Impl) AppendUint(dst []byte, i uint64, base int) []byte {
	return strconv.AppendUint(dst, i, base)
}
func (*Impl) Atoi(s string) (int, error) {
	return strconv.Atoi(s)
}
func (*Impl) CanBackquote(s string) bool {
	return strconv.CanBackquote(s)
}
func (*Impl) FormatBool(b bool) string {
	return strconv.FormatBool(b)
}
func (*Impl) FormatComplex(c complex128, fmt byte, prec int, bitSize int) string {
	return strconv.FormatComplex(c, fmt, prec, bitSize)
}
func (*Impl) FormatFloat(f float64, fmt byte, prec int, bitSize int) string {
	return strconv.FormatFloat(f, fmt, prec, bitSize)
}
func (*Impl) FormatInt(i int64, base int) string {
	return strconv.FormatInt(i, base)
}
func (*Impl) FormatUint(i uint64, base int) string {
	return strconv.FormatUint(i, base)
}
func (*Impl) IsGraphic(r rune) bool {
	return strconv.IsGraphic(r)
}
func (*Impl) IsPrint(r rune) bool {
	return strconv.IsPrint(r)
}
func (*Impl) Itoa(i int) string {
	return strconv.Itoa(i)
}
func (*Impl) ParseBool(str string) (bool, error) {
	return strconv.ParseBool(str)
}
func (*Impl) ParseComplex(s string, bitSize int) (complex128, error) {
	return strconv.ParseComplex(s, bitSize)
}
func (*Impl) ParseFloat(s string, bitSize int) (float64, error) {
	return strconv.ParseFloat(s, bitSize)
}
func (*Impl) ParseInt(s string, base int, bitSize int) (i int64, err error) {
	return strconv.ParseInt(s, base, bitSize)
}
func (*Impl) ParseUint(s string, base int, bitSize int) (uint64, error) {
	return strconv.ParseUint(s, base, bitSize)
}
func (*Impl) Quote(s string) string {
	return strconv.Quote(s)
}
func (*Impl) QuoteRune(r rune) string {
	return strconv.QuoteRune(r)
}
func (*Impl) QuoteRuneToASCII(r rune) string {
	return strconv.QuoteRuneToASCII(r)
}
func (*Impl) QuoteRuneToGraphic(r rune) string {
	return strconv.QuoteRuneToGraphic(r)
}
func (*Impl) QuoteToASCII(s string) string {
	return strconv.QuoteToASCII(s)
}
func (*Impl) QuoteToGraphic(s string) string {
	return strconv.QuoteToGraphic(s)
}
func (*Impl) QuotedPrefix(s string) (string, error) {
	return strconv.QuotedPrefix(s)
}
func (*Impl) Unquote(s string) (string, error) {
	return strconv.Unquote(s)
}
func (*Impl) UnquoteChar(s string, quote byte) (value rune, multibyte bool, tail string, err error) {
	return strconv.UnquoteChar(s, quote)
}
