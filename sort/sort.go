// Code generated by a tool. DO NOT EDIT.

// Package sort provides a mockable wrapper for sort.
package sort

import (
	sort "sort"
)

var _ Interface = &Impl{}
var _ = sort.Float64s

type Interface interface {
	Float64s(x []float64)
	Float64sAreSorted(x []float64) bool
	Ints(x []int)
	IntsAreSorted(x []int) bool
	IsSorted(data sort.Interface) bool
	Reverse(data sort.Interface) sort.Interface
	Search(n int, f func(int) bool) int
	SearchFloat64s(a []float64, x float64) int
	SearchInts(a []int, x int) int
	SearchStrings(a []string, x string) int
	Slice(x any, less func(i int, j int) bool)
	SliceIsSorted(x any, less func(i int, j int) bool) bool
	SliceStable(x any, less func(i int, j int) bool)
	Sort(data sort.Interface)
	Stable(data sort.Interface)
	Strings(x []string)
	StringsAreSorted(x []string) bool
}

type Impl struct{}

func (*Impl) Float64s(x []float64) {
	sort.Float64s(x)
}
func (*Impl) Float64sAreSorted(x []float64) bool {
	return sort.Float64sAreSorted(x)
}
func (*Impl) Ints(x []int) {
	sort.Ints(x)
}
func (*Impl) IntsAreSorted(x []int) bool {
	return sort.IntsAreSorted(x)
}
func (*Impl) IsSorted(data sort.Interface) bool {
	return sort.IsSorted(data)
}
func (*Impl) Reverse(data sort.Interface) sort.Interface {
	return sort.Reverse(data)
}
func (*Impl) Search(n int, f func(int) bool) int {
	return sort.Search(n, f)
}
func (*Impl) SearchFloat64s(a []float64, x float64) int {
	return sort.SearchFloat64s(a, x)
}
func (*Impl) SearchInts(a []int, x int) int {
	return sort.SearchInts(a, x)
}
func (*Impl) SearchStrings(a []string, x string) int {
	return sort.SearchStrings(a, x)
}
func (*Impl) Slice(x any, less func(i int, j int) bool) {
	sort.Slice(x, less)
}
func (*Impl) SliceIsSorted(x any, less func(i int, j int) bool) bool {
	return sort.SliceIsSorted(x, less)
}
func (*Impl) SliceStable(x any, less func(i int, j int) bool) {
	sort.SliceStable(x, less)
}
func (*Impl) Sort(data sort.Interface) {
	sort.Sort(data)
}
func (*Impl) Stable(data sort.Interface) {
	sort.Stable(data)
}
func (*Impl) Strings(x []string) {
	sort.Strings(x)
}
func (*Impl) StringsAreSorted(x []string) bool {
	return sort.StringsAreSorted(x)
}
