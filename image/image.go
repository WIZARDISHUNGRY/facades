// Code generated by a tool. DO NOT EDIT.

// Package image provides a mockable wrapper for image.
package image

import (
	image "image"
	color "image/color"
	io "io"
)

var _ Interface = &Impl{}
var _ = image.Decode

type Interface interface {
	Decode(r io.Reader) (image.Image, string, error)
	DecodeConfig(r io.Reader) (image.Config, string, error)
	NewAlpha(r image.Rectangle) *image.Alpha
	NewAlpha16(r image.Rectangle) *image.Alpha16
	NewCMYK(r image.Rectangle) *image.CMYK
	NewGray(r image.Rectangle) *image.Gray
	NewGray16(r image.Rectangle) *image.Gray16
	NewNRGBA(r image.Rectangle) *image.NRGBA
	NewNRGBA64(r image.Rectangle) *image.NRGBA64
	NewNYCbCrA(r image.Rectangle, subsampleRatio image.YCbCrSubsampleRatio) *image.NYCbCrA
	NewPaletted(r image.Rectangle, p color.Palette) *image.Paletted
	NewRGBA(r image.Rectangle) *image.RGBA
	NewRGBA64(r image.Rectangle) *image.RGBA64
	NewUniform(c color.Color) *image.Uniform
	NewYCbCr(r image.Rectangle, subsampleRatio image.YCbCrSubsampleRatio) *image.YCbCr
	Pt(X int, Y int) image.Point
	Rect(x0 int, y0 int, x1 int, y1 int) image.Rectangle
	RegisterFormat(name string, magic string, decode func(io.Reader) (image.Image, error), decodeConfig func(io.Reader) (image.Config, error))
}

type Impl struct{}

func (*Impl) Decode(r io.Reader) (image.Image, string, error) {
	return image.Decode(r)
}
func (*Impl) DecodeConfig(r io.Reader) (image.Config, string, error) {
	return image.DecodeConfig(r)
}
func (*Impl) NewAlpha(r image.Rectangle) *image.Alpha {
	return image.NewAlpha(r)
}
func (*Impl) NewAlpha16(r image.Rectangle) *image.Alpha16 {
	return image.NewAlpha16(r)
}
func (*Impl) NewCMYK(r image.Rectangle) *image.CMYK {
	return image.NewCMYK(r)
}
func (*Impl) NewGray(r image.Rectangle) *image.Gray {
	return image.NewGray(r)
}
func (*Impl) NewGray16(r image.Rectangle) *image.Gray16 {
	return image.NewGray16(r)
}
func (*Impl) NewNRGBA(r image.Rectangle) *image.NRGBA {
	return image.NewNRGBA(r)
}
func (*Impl) NewNRGBA64(r image.Rectangle) *image.NRGBA64 {
	return image.NewNRGBA64(r)
}
func (*Impl) NewNYCbCrA(r image.Rectangle, subsampleRatio image.YCbCrSubsampleRatio) *image.NYCbCrA {
	return image.NewNYCbCrA(r, subsampleRatio)
}
func (*Impl) NewPaletted(r image.Rectangle, p color.Palette) *image.Paletted {
	return image.NewPaletted(r, p)
}
func (*Impl) NewRGBA(r image.Rectangle) *image.RGBA {
	return image.NewRGBA(r)
}
func (*Impl) NewRGBA64(r image.Rectangle) *image.RGBA64 {
	return image.NewRGBA64(r)
}
func (*Impl) NewUniform(c color.Color) *image.Uniform {
	return image.NewUniform(c)
}
func (*Impl) NewYCbCr(r image.Rectangle, subsampleRatio image.YCbCrSubsampleRatio) *image.YCbCr {
	return image.NewYCbCr(r, subsampleRatio)
}
func (*Impl) Pt(X int, Y int) image.Point {
	return image.Pt(X, Y)
}
func (*Impl) Rect(x0 int, y0 int, x1 int, y1 int) image.Rectangle {
	return image.Rect(x0, y0, x1, y1)
}
func (*Impl) RegisterFormat(name string, magic string, decode func(io.Reader) (image.Image, error), decodeConfig func(io.Reader) (image.Config, error)) {
	image.RegisterFormat(name, magic, decode, decodeConfig)
}
