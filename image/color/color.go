// Code generated by a tool. DO NOT EDIT.

// Package color provides a mockable wrapper for image/color.
package color

import (
	color "image/color"
)

var _ Interface = &Impl{}
var _ = color.CMYKToRGB

type Interface interface {
	CMYKToRGB(c uint8, m uint8, y uint8, k uint8) (uint8, uint8, uint8)
	ModelFunc(f func(color.Color) color.Color) color.Model
	RGBToCMYK(r uint8, g uint8, b uint8) (uint8, uint8, uint8, uint8)
	RGBToYCbCr(r uint8, g uint8, b uint8) (uint8, uint8, uint8)
	YCbCrToRGB(y uint8, cb uint8, cr uint8) (uint8, uint8, uint8)
}

type Impl struct{}

func (*Impl) CMYKToRGB(c uint8, m uint8, y uint8, k uint8) (uint8, uint8, uint8) {
	return color.CMYKToRGB(c, m, y, k)
}
func (*Impl) ModelFunc(f func(color.Color) color.Color) color.Model {
	return color.ModelFunc(f)
}
func (*Impl) RGBToCMYK(r uint8, g uint8, b uint8) (uint8, uint8, uint8, uint8) {
	return color.RGBToCMYK(r, g, b)
}
func (*Impl) RGBToYCbCr(r uint8, g uint8, b uint8) (uint8, uint8, uint8) {
	return color.RGBToYCbCr(r, g, b)
}
func (*Impl) YCbCrToRGB(y uint8, cb uint8, cr uint8) (uint8, uint8, uint8) {
	return color.YCbCrToRGB(y, cb, cr)
}
