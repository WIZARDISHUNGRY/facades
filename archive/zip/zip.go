// Code generated by a tool. DO NOT EDIT.

// Package zip provides a mockable wrapper for archive/zip.
package zip

import (
	zip "archive/zip"
	io "io"
	fs "io/fs"
)

var _ Interface = &Impl{}
var _ = zip.FileInfoHeader

type Interface interface {
	FileInfoHeader(fi fs.FileInfo) (*zip.FileHeader, error)
	NewReader(r io.ReaderAt, size int64) (*zip.Reader, error)
	NewWriter(w io.Writer) *zip.Writer
	OpenReader(name string) (*zip.ReadCloser, error)
	RegisterCompressor(method uint16, comp zip.Compressor)
	RegisterDecompressor(method uint16, dcomp zip.Decompressor)
}

type Impl struct{}

func (*Impl) FileInfoHeader(fi fs.FileInfo) (*zip.FileHeader, error) {
	return zip.FileInfoHeader(fi)
}
func (*Impl) NewReader(r io.ReaderAt, size int64) (*zip.Reader, error) {
	return zip.NewReader(r, size)
}
func (*Impl) NewWriter(w io.Writer) *zip.Writer {
	return zip.NewWriter(w)
}
func (*Impl) OpenReader(name string) (*zip.ReadCloser, error) {
	return zip.OpenReader(name)
}
func (*Impl) RegisterCompressor(method uint16, comp zip.Compressor) {
	zip.RegisterCompressor(method, comp)
}
func (*Impl) RegisterDecompressor(method uint16, dcomp zip.Decompressor) {
	zip.RegisterDecompressor(method, dcomp)
}
