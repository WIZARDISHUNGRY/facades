// Code generated by a tool. DO NOT EDIT.

// Package parser provides a mockable wrapper for go/parser.
package parser

import (
	ast "go/ast"
	parser "go/parser"
	token "go/token"
	fs "io/fs"
)

var _ Interface = &Impl{}
var _ = parser.ParseDir

type Interface interface {
	ParseDir(fset *token.FileSet, path string, filter func(fs.FileInfo) bool, mode parser.Mode) (pkgs map[string]*ast.Package, first error)
	ParseExpr(x string) (ast.Expr, error)
	ParseExprFrom(fset *token.FileSet, filename string, src any, mode parser.Mode) (expr ast.Expr, err error)
	ParseFile(fset *token.FileSet, filename string, src any, mode parser.Mode) (f *ast.File, err error)
}

type Impl struct{}

func (*Impl) ParseDir(fset *token.FileSet, path string, filter func(fs.FileInfo) bool, mode parser.Mode) (pkgs map[string]*ast.Package, first error) {
	return parser.ParseDir(fset, path, filter, mode)
}
func (*Impl) ParseExpr(x string) (ast.Expr, error) {
	return parser.ParseExpr(x)
}
func (*Impl) ParseExprFrom(fset *token.FileSet, filename string, src any, mode parser.Mode) (expr ast.Expr, err error) {
	return parser.ParseExprFrom(fset, filename, src, mode)
}
func (*Impl) ParseFile(fset *token.FileSet, filename string, src any, mode parser.Mode) (f *ast.File, err error) {
	return parser.ParseFile(fset, filename, src, mode)
}
