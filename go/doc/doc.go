// Code generated by a tool. DO NOT EDIT.

// Package doc provides a mockable wrapper for go/doc.
package doc

import (
	ast "go/ast"
	doc "go/doc"
	token "go/token"
	io "io"
)

var _ Interface = &Impl{}
var _ = doc.Examples

type Interface interface {
	Examples(testFiles ...*ast.File) []*doc.Example
	IsPredeclared(s string) bool
	New(pkg *ast.Package, importPath string, mode doc.Mode) *doc.Package
	NewFromFiles(fset *token.FileSet, files []*ast.File, importPath string, opts ...any) (*doc.Package, error)
	Synopsis(s string) string
	ToHTML(w io.Writer, text string, words map[string]string)
	ToText(w io.Writer, text string, indent string, preIndent string, width int)
}

type Impl struct{}

func (*Impl) Examples(testFiles ...*ast.File) []*doc.Example {
	return doc.Examples(testFiles...)
}
func (*Impl) IsPredeclared(s string) bool {
	return doc.IsPredeclared(s)
}
func (*Impl) New(pkg *ast.Package, importPath string, mode doc.Mode) *doc.Package {
	return doc.New(pkg, importPath, mode)
}
func (*Impl) NewFromFiles(fset *token.FileSet, files []*ast.File, importPath string, opts ...any) (*doc.Package, error) {
	return doc.NewFromFiles(fset, files, importPath, opts...)
}
func (*Impl) Synopsis(s string) string {
	return doc.Synopsis(s)
}
func (*Impl) ToHTML(w io.Writer, text string, words map[string]string) {
	doc.ToHTML(w, text, words)
}
func (*Impl) ToText(w io.Writer, text string, indent string, preIndent string, width int) {
	doc.ToText(w, text, indent, preIndent, width)
}
