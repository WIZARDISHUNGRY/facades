// Code generated by a tool. DO NOT EDIT.

// Package rand provides a mockable wrapper for crypto/rand.
package rand

import (
	rand "crypto/rand"
	io "io"
	big "math/big"
)

var _ Interface = &Impl{}
var _ = rand.Int

type Interface interface {
	Int(rand io.Reader, max *big.Int) (n *big.Int, err error)
	Prime(rand io.Reader, bits int) (p *big.Int, err error)
	Read(b []byte) (n int, err error)
}

type Impl struct{}

func (*Impl) Int(rand_v io.Reader, max_v *big.Int) (n *big.Int, err error) {
	return rand.Int(rand_v, max_v)
}
func (*Impl) Prime(rand_v io.Reader, bits_v int) (p *big.Int, err error) {
	return rand.Prime(rand_v, bits_v)
}
func (*Impl) Read(b []byte) (n int, err error) {
	return rand.Read(b)
}
