// Code generated by a tool. DO NOT EDIT.

// Package subtle provides a mockable wrapper for crypto/subtle.
package subtle

import (
	subtle "crypto/subtle"
)

var _ Interface = &Impl{}
var _ = subtle.ConstantTimeByteEq

type Interface interface {
	ConstantTimeByteEq(x uint8, y uint8) int
	ConstantTimeCompare(x []byte, y []byte) int
	ConstantTimeCopy(v int, x []byte, y []byte)
	ConstantTimeEq(x int32, y int32) int
	ConstantTimeLessOrEq(x int, y int) int
	ConstantTimeSelect(v int, x int, y int) int
}

type Impl struct{}

func (*Impl) ConstantTimeByteEq(x uint8, y uint8) int {
	return subtle.ConstantTimeByteEq(x, y)
}
func (*Impl) ConstantTimeCompare(x []byte, y []byte) int {
	return subtle.ConstantTimeCompare(x, y)
}
func (*Impl) ConstantTimeCopy(v int, x []byte, y []byte) {
	subtle.ConstantTimeCopy(v, x, y)
}
func (*Impl) ConstantTimeEq(x int32, y int32) int {
	return subtle.ConstantTimeEq(x, y)
}
func (*Impl) ConstantTimeLessOrEq(x int, y int) int {
	return subtle.ConstantTimeLessOrEq(x, y)
}
func (*Impl) ConstantTimeSelect(v int, x int, y int) int {
	return subtle.ConstantTimeSelect(v, x, y)
}
