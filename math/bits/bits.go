// Code generated by a tool. DO NOT EDIT.

// Package bits provides a mockable wrapper for math/bits.
package bits

import (
	bits "math/bits"
)

var _ Interface = &Impl{}
var _ = bits.Add

type Interface interface {
	Add(x uint, y uint, carry uint) (sum uint, carryOut uint)
	Add32(x uint32, y uint32, carry uint32) (sum uint32, carryOut uint32)
	Add64(x uint64, y uint64, carry uint64) (sum uint64, carryOut uint64)
	Div(hi uint, lo uint, y uint) (quo uint, rem uint)
	Div32(hi uint32, lo uint32, y uint32) (quo uint32, rem uint32)
	Div64(hi uint64, lo uint64, y uint64) (quo uint64, rem uint64)
	LeadingZeros(x uint) int
	LeadingZeros16(x uint16) int
	LeadingZeros32(x uint32) int
	LeadingZeros64(x uint64) int
	LeadingZeros8(x uint8) int
	Len(x uint) int
	Len16(x uint16) (n int)
	Len32(x uint32) (n int)
	Len64(x uint64) (n int)
	Len8(x uint8) int
	Mul(x uint, y uint) (hi uint, lo uint)
	Mul32(x uint32, y uint32) (hi uint32, lo uint32)
	Mul64(x uint64, y uint64) (hi uint64, lo uint64)
	OnesCount(x uint) int
	OnesCount16(x uint16) int
	OnesCount32(x uint32) int
	OnesCount64(x uint64) int
	OnesCount8(x uint8) int
	Rem(hi uint, lo uint, y uint) uint
	Rem32(hi uint32, lo uint32, y uint32) uint32
	Rem64(hi uint64, lo uint64, y uint64) uint64
	Reverse(x uint) uint
	Reverse16(x uint16) uint16
	Reverse32(x uint32) uint32
	Reverse64(x uint64) uint64
	Reverse8(x uint8) uint8
	ReverseBytes(x uint) uint
	ReverseBytes16(x uint16) uint16
	ReverseBytes32(x uint32) uint32
	ReverseBytes64(x uint64) uint64
	RotateLeft(x uint, k int) uint
	RotateLeft16(x uint16, k int) uint16
	RotateLeft32(x uint32, k int) uint32
	RotateLeft64(x uint64, k int) uint64
	RotateLeft8(x uint8, k int) uint8
	Sub(x uint, y uint, borrow uint) (diff uint, borrowOut uint)
	Sub32(x uint32, y uint32, borrow uint32) (diff uint32, borrowOut uint32)
	Sub64(x uint64, y uint64, borrow uint64) (diff uint64, borrowOut uint64)
	TrailingZeros(x uint) int
	TrailingZeros16(x uint16) int
	TrailingZeros32(x uint32) int
	TrailingZeros64(x uint64) int
	TrailingZeros8(x uint8) int
}

type Impl struct{}

func (*Impl) Add(x uint, y uint, carry uint) (sum uint, carryOut uint) {
	return bits.Add(x, y, carry)
}
func (*Impl) Add32(x uint32, y uint32, carry uint32) (sum uint32, carryOut uint32) {
	return bits.Add32(x, y, carry)
}
func (*Impl) Add64(x uint64, y uint64, carry uint64) (sum uint64, carryOut uint64) {
	return bits.Add64(x, y, carry)
}
func (*Impl) Div(hi uint, lo uint, y uint) (quo uint, rem uint) {
	return bits.Div(hi, lo, y)
}
func (*Impl) Div32(hi uint32, lo uint32, y uint32) (quo uint32, rem uint32) {
	return bits.Div32(hi, lo, y)
}
func (*Impl) Div64(hi uint64, lo uint64, y uint64) (quo uint64, rem uint64) {
	return bits.Div64(hi, lo, y)
}
func (*Impl) LeadingZeros(x uint) int {
	return bits.LeadingZeros(x)
}
func (*Impl) LeadingZeros16(x uint16) int {
	return bits.LeadingZeros16(x)
}
func (*Impl) LeadingZeros32(x uint32) int {
	return bits.LeadingZeros32(x)
}
func (*Impl) LeadingZeros64(x uint64) int {
	return bits.LeadingZeros64(x)
}
func (*Impl) LeadingZeros8(x uint8) int {
	return bits.LeadingZeros8(x)
}
func (*Impl) Len(x uint) int {
	return bits.Len(x)
}
func (*Impl) Len16(x uint16) (n int) {
	return bits.Len16(x)
}
func (*Impl) Len32(x uint32) (n int) {
	return bits.Len32(x)
}
func (*Impl) Len64(x uint64) (n int) {
	return bits.Len64(x)
}
func (*Impl) Len8(x uint8) int {
	return bits.Len8(x)
}
func (*Impl) Mul(x uint, y uint) (hi uint, lo uint) {
	return bits.Mul(x, y)
}
func (*Impl) Mul32(x uint32, y uint32) (hi uint32, lo uint32) {
	return bits.Mul32(x, y)
}
func (*Impl) Mul64(x uint64, y uint64) (hi uint64, lo uint64) {
	return bits.Mul64(x, y)
}
func (*Impl) OnesCount(x uint) int {
	return bits.OnesCount(x)
}
func (*Impl) OnesCount16(x uint16) int {
	return bits.OnesCount16(x)
}
func (*Impl) OnesCount32(x uint32) int {
	return bits.OnesCount32(x)
}
func (*Impl) OnesCount64(x uint64) int {
	return bits.OnesCount64(x)
}
func (*Impl) OnesCount8(x uint8) int {
	return bits.OnesCount8(x)
}
func (*Impl) Rem(hi uint, lo uint, y uint) uint {
	return bits.Rem(hi, lo, y)
}
func (*Impl) Rem32(hi uint32, lo uint32, y uint32) uint32 {
	return bits.Rem32(hi, lo, y)
}
func (*Impl) Rem64(hi uint64, lo uint64, y uint64) uint64 {
	return bits.Rem64(hi, lo, y)
}
func (*Impl) Reverse(x uint) uint {
	return bits.Reverse(x)
}
func (*Impl) Reverse16(x uint16) uint16 {
	return bits.Reverse16(x)
}
func (*Impl) Reverse32(x uint32) uint32 {
	return bits.Reverse32(x)
}
func (*Impl) Reverse64(x uint64) uint64 {
	return bits.Reverse64(x)
}
func (*Impl) Reverse8(x uint8) uint8 {
	return bits.Reverse8(x)
}
func (*Impl) ReverseBytes(x uint) uint {
	return bits.ReverseBytes(x)
}
func (*Impl) ReverseBytes16(x uint16) uint16 {
	return bits.ReverseBytes16(x)
}
func (*Impl) ReverseBytes32(x uint32) uint32 {
	return bits.ReverseBytes32(x)
}
func (*Impl) ReverseBytes64(x uint64) uint64 {
	return bits.ReverseBytes64(x)
}
func (*Impl) RotateLeft(x uint, k int) uint {
	return bits.RotateLeft(x, k)
}
func (*Impl) RotateLeft16(x uint16, k int) uint16 {
	return bits.RotateLeft16(x, k)
}
func (*Impl) RotateLeft32(x uint32, k int) uint32 {
	return bits.RotateLeft32(x, k)
}
func (*Impl) RotateLeft64(x uint64, k int) uint64 {
	return bits.RotateLeft64(x, k)
}
func (*Impl) RotateLeft8(x uint8, k int) uint8 {
	return bits.RotateLeft8(x, k)
}
func (*Impl) Sub(x uint, y uint, borrow uint) (diff uint, borrowOut uint) {
	return bits.Sub(x, y, borrow)
}
func (*Impl) Sub32(x uint32, y uint32, borrow uint32) (diff uint32, borrowOut uint32) {
	return bits.Sub32(x, y, borrow)
}
func (*Impl) Sub64(x uint64, y uint64, borrow uint64) (diff uint64, borrowOut uint64) {
	return bits.Sub64(x, y, borrow)
}
func (*Impl) TrailingZeros(x uint) int {
	return bits.TrailingZeros(x)
}
func (*Impl) TrailingZeros16(x uint16) int {
	return bits.TrailingZeros16(x)
}
func (*Impl) TrailingZeros32(x uint32) int {
	return bits.TrailingZeros32(x)
}
func (*Impl) TrailingZeros64(x uint64) int {
	return bits.TrailingZeros64(x)
}
func (*Impl) TrailingZeros8(x uint8) int {
	return bits.TrailingZeros8(x)
}
