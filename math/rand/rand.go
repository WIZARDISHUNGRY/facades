// Code generated by a tool. DO NOT EDIT.

// Package rand provides a mockable wrapper for math/rand.
package rand

import (
	rand "math/rand"
)

var _ Interface = &Impl{}
var _ = rand.ExpFloat64

type Interface interface {
	ExpFloat64() float64
	Float32() float32
	Float64() float64
	Int() int
	Int31() int32
	Int31n(n int32) int32
	Int63() int64
	Int63n(n int64) int64
	Intn(n int) int
	New(src rand.Source) *rand.Rand
	NewSource(seed int64) rand.Source
	NewZipf(r *rand.Rand, s float64, v float64, imax uint64) *rand.Zipf
	NormFloat64() float64
	Perm(n int) []int
	Read(p []byte) (n int, err error)
	Seed(seed int64)
	Shuffle(n int, swap func(i int, j int))
	Uint32() uint32
	Uint64() uint64
}

type Impl struct{}

func (*Impl) ExpFloat64() float64 {
	return rand.ExpFloat64()
}
func (*Impl) Float32() float32 {
	return rand.Float32()
}
func (*Impl) Float64() float64 {
	return rand.Float64()
}
func (*Impl) Int() int {
	return rand.Int()
}
func (*Impl) Int31() int32 {
	return rand.Int31()
}
func (*Impl) Int31n(n int32) int32 {
	return rand.Int31n(n)
}
func (*Impl) Int63() int64 {
	return rand.Int63()
}
func (*Impl) Int63n(n int64) int64 {
	return rand.Int63n(n)
}
func (*Impl) Intn(n int) int {
	return rand.Intn(n)
}
func (*Impl) New(src rand.Source) *rand.Rand {
	return rand.New(src)
}
func (*Impl) NewSource(seed int64) rand.Source {
	return rand.NewSource(seed)
}
func (*Impl) NewZipf(r *rand.Rand, s float64, v float64, imax uint64) *rand.Zipf {
	return rand.NewZipf(r, s, v, imax)
}
func (*Impl) NormFloat64() float64 {
	return rand.NormFloat64()
}
func (*Impl) Perm(n int) []int {
	return rand.Perm(n)
}
func (*Impl) Read(p []byte) (n int, err error) {
	return rand.Read(p)
}
func (*Impl) Seed(seed int64) {
	rand.Seed(seed)
}
func (*Impl) Shuffle(n int, swap func(i int, j int)) {
	rand.Shuffle(n, swap)
}
func (*Impl) Uint32() uint32 {
	return rand.Uint32()
}
func (*Impl) Uint64() uint64 {
	return rand.Uint64()
}
